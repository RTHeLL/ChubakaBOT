import configparser
import logging
# import random
from typing import Optional, Any, List

from vkbottle import GroupEventType, GroupTypes, Keyboard, KeyboardButtonColor, Text, VKAPIError, ABCHandler, ABCView, BaseMiddleware, \
    CtxStorage
from vkbottle.bot import Bot, Message
from vkbottle_types.objects import UsersUserXtrCounters

import classes.mysql

mysql = classes.mysql.MySQL()
dummy_db = CtxStorage()
config = configparser.ConfigParser()
config.read("data/vk_config.ini")

# Logs
logging.basicConfig(filename="logs/logs.log")

# VK Connection
bot = Bot(config["VK_DATA"]["GROUP_TOKEN"])

logging.basicConfig(level=logging.INFO)

START_KEYBOARD = Keyboard(one_time=True).add(Text("‚ùì –ü–æ–º–æ—â—å", {"cmd": "cmd_help"}), KeyboardButtonColor.POSITIVE).get_json()
MAIN_KEYBOARD = Keyboard(one_time=False).schema(
    [
        [{"label": "–ü—Ä–æ—Ñ–∏–ª—å", "type": "text", "color": "positive"}],
        [
            {"label": "–ü–æ–º–æ—â—å", "type": "text", "color": "primary"},
            {"label": "–¢–µ—Å—Ç 1", "type": "text", "color": "primary"},
            {"label": "–¢–µ—Å—Ç 2", "type": "text", "color": "primary"},
            {"label": "–¢–µ—Å—Ç 3", "type": "text", "color": "primary"},
        ],
    ]
).get_json()


# Subs classes
class NoBotMiddleware(BaseMiddleware):
    async def pre(self, message: Message):
        return message.from_id > 0  # True / False


class RegistrationMiddleware(BaseMiddleware):
    async def pre(self, message: Message):
        user = dummy_db.get(message.from_id)
        if user is None:
            user = (await bot.api.users.get(message.from_id))[0]
            dummy_db.set(message.from_id, user)
        return {"info": user}


class InfoMiddleware(BaseMiddleware):
    async def post(
            self,
            message: Message,
            view: "ABCView",
            handle_responses: List[Any],
            handlers: List["ABCHandler"],
    ):
        if not handlers:
            return


# Bot commands
@bot.on.message(text=["–ù–∞—á–∞—Ç—å", "–°—Ç–∞—Ä—Ç", "–Ω–∞—á–∞—Ç—å", "—Å—Ç–∞—Ä—Ç"])
@bot.on.message(payload={"cmd": "cmd_start"})
async def start_handler(message: Message, info: UsersUserXtrCounters):
    if not mysql.check_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        mysql.create_user(message.from_id)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: \
{mysql.check_user(message.from_id)[0]}")
    else:
        await message.answer(f"@id{message.from_id} ({info.first_name}), –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nüîé ID: {mysql.check_user(message.from_id)[0]}\nüí∞ –î–µ–Ω–µ–≥: {mysql.check_user(message.from_id)[2]}")


@bot.on.message(text=["–ü–æ–º–æ—â—å", "–ø–æ–º–æ—â—å"])
@bot.on.message(payload={"cmd": "cmd_start"})
async def help_handler(message: Message, info: UsersUserXtrCounters):
    if not mysql.check_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        mysql.create_user(message.from_id)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: \
{mysql.check_user(message.from_id)[0]}")
    else:
        await message.answer(f"@id{message.from_id} ({info.first_name}), –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\nüéâ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ:\n‚†Ä‚†Äüòê "
                             f"–ê–Ω–µ–∫–¥–æ—Ç\n‚†Ä‚†Ä‚Ü™ –ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ [—Ñ—Ä–∞–∑–∞]\n‚†Ä‚†ÄüîÆ –®–∞—Ä [—Ñ—Ä–∞–∑–∞]\n‚†Ä‚†Äüìä –ò–Ω—Ñ–∞ [—Ñ—Ä–∞–∑–∞]\n‚†Ä‚†Ä‚öñ –í—ã–±–µ—Ä–∏ [—Ñ—Ä–∞–∑–∞] "
                             f"–∏–ª–∏ [—Ñ—Ä–∞–∑–∞2]\n\nüöÄ –ò–≥—Ä—ã:\n‚†Ä‚†Äüé≤ –ö—É–±–∏–∫ [1-6]\n‚†Ä‚†Äüé∞ –ö–∞–∑–∏–Ω–æ [—Å—É–º–º–∞]\n‚†Ä‚†Äüìà –¢—Ä–µ–π–¥ ["
                             f"–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑] [—Å—É–º–º–∞]\n‚†Ä‚†Äü•õ –°—Ç–∞–∫–∞–Ω—á–∏–∫ [1-3] [—Å—É–º–º–∞]\n‚†Ä‚†Äü¶Ö –ú–æ–Ω–µ—Ç–∫–∞ [–æ—Ä—ë–ª/—Ä–µ—à–∫–∞] ["
                             f"—Å—É–º–º–∞]\n‚†Ä‚†Äüì¶ –ö–µ–π—Å—ã\n\nüíº –ë–∏–∑–Ω–µ—Å:\n‚†Ä‚†ÄüìÉ –ë–∏–∑–Ω–µ—Å—ã [1/2] - —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤\n‚†Ä‚†Äüìà –ë–∏–∑–Ω–µ—Å - "
                             f"—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚†Ä‚†Äüíµ –ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å [–∫–æ–ª-–≤–æ] - —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å–æ —Å—á—ë—Ç–∞\n‚†Ä‚†Äüë∑ –ë–∏–∑–Ω–µ—Å –Ω–∞–Ω—è—Ç—å - "
                             f"–Ω–∞–Ω—è—Ç—å —Ä–∞–±–æ—á–∏—Ö\n\nüåΩ –ü–∏—Ç–æ–º—Ü—ã:\n‚†Ä‚†Äüêí –ü–∏—Ç–æ–º–µ—Ü - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n‚†Ä‚†Äüê™ –ü–∏—Ç–æ–º–µ—Ü –ø–æ—Ö–æ–¥\n‚†Ä‚†Äüåü "
                             f"–ü–∏—Ç–æ–º–µ—Ü —É–ª—É—á—à–∏—Ç—å\n\nüî• –ü–æ–ª–µ–∑–Ω–æ–µ:\n‚†Ä‚†Äüì† –†–µ—à–∏ [–ø—Ä–∏–º–µ—Ä]\n‚†Ä‚†Äüìä –ö—É—Ä—Å\n‚†Ä‚†ÄüÜï /–∫–Ω–æ–ø–∫–∏\n\nüí° "
                             f"–†–∞–∑–Ω–æ–µ:\n‚†Ä‚†Äüìí –ü—Ä–æ—Ñ–∏–ª—å\n‚†Ä‚†Ä‚öî –ö–ª–∞–Ω\n‚†Ä‚†Äüçπ –ó–µ–ª—å—è\n‚†Ä‚†Äüí≤ –ë–∞–ª–∞–Ω—Å\n‚†Ä‚†Äüí∞ –ë–∞–Ω–∫\n‚†Ä‚†Äüí≥ –ë–∞–Ω–∫ –ø–æ–º–æ—â—å - –≤—Å–µ "
                             f"–∫–æ–º–∞–Ω–¥—ã –±–∞–Ω–∫–∞\n‚†Ä‚†Äüëë –†–µ–π—Ç–∏–Ω–≥ - –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥\n‚†Ä‚†ÄüèÜ –¢–æ–ø\n‚†Ä‚†Ä‚úí –ù–∏–∫ [–Ω–∏–∫/–≤–∫–ª/–≤—ã–∫–ª]\n‚†Ä‚†Äüõç "
                             f"–ú–∞–≥–∞–∑–∏–Ω\n‚†Ä‚†Äüí∏ –ü—Ä–æ–¥–∞—Ç—å [–ø—Ä–µ–¥–º–µ—Ç]\n‚†Ä‚†Äüîã –§–µ—Ä–º–∞ - –±–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º–∞\n‚†Ä‚†Äü§ù –ü–µ—Ä–µ–¥–∞—Ç—å [ID] ["
                             f"—Å—É–º–º–∞]\n‚†Ä‚†Äüíé –ë–æ–Ω—É—Å - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n‚†Ä‚†Äüë• –†–µn\n‚†Ä‚†ÄüèÜ –†–µ—Ñ —Ç–æ–ø\n‚†Ä‚†ÄüéÅ –î–æ–Ω–∞—Ç\n\nüÜò –†–µ–ø–æ—Ä—Ç ["
                             f"—Ñ—Ä–∞–∑–∞] - –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è", keyboard=MAIN_KEYBOARD)


@bot.on.message(text=["–ü—Ä–æ—Ñ–∏–ª—å", "–ø—Ä–æ—Ñ–∏–ª—å"])
@bot.on.message(payload={"cmd": "cmd_profile"})
async def start_handler(message: Message, info: UsersUserXtrCounters):
    if not mysql.check_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        mysql.create_user(message.from_id)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: \
{mysql.check_user(message.from_id)[0]}")
    else:
        await message.answer(f"@id{message.from_id} ({info.first_name}), –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nüîé ID: {mysql.check_user(message.from_id)[0]}\nüí∞ –î–µ–Ω–µ–≥: {mysql.check_user(message.from_id)[2]}")

# If you need to make handler respond for 2 different rule set you can
# use double decorator like here it is or use filters (OrFilter here)
# @bot.on.message(text=["/—Å—ä–µ—Å—Ç—å <item>", "/—Å—ä–µ—Å—Ç—å"])
# @bot.on.message(payload={"cmd": "eat"})
# async def eat_handler(message: Message, item: Optional[str] = None):
#     if item is None:
#         item = random.choice(EATABLE)
#     await message.answer(f"–¢—ã —Å—ä–µ–ª <<{item}>>!", keyboard=KEYBOARD)


@bot.on.raw_event(GroupEventType.GROUP_JOIN, dataclass=GroupTypes.GroupJoin)
async def group_join_handler(event: GroupTypes.GroupJoin):
    try:
        await bot.api.messages.send(
            peer_id=event.object.user_id, message="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!", random_id=0, keyboard=MAIN_KEYBOARD
        )
    except VKAPIError(901):
        pass


# Runs loop > loop.run_forever() > with tasks created in loop_wrapper before,
# read the loop wrapper documentation to comprehend this > tools/loop-wrapper.
# The main polling task for bot is bot.run_polling()
bot.labeler.message_view.register_middleware(NoBotMiddleware())
bot.labeler.message_view.register_middleware(RegistrationMiddleware())
bot.labeler.message_view.register_middleware(InfoMiddleware())
bot.run_forever()