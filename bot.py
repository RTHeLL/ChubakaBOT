import configparser
import logging
import random
import math
import requests
from typing import Optional, Any, List

# Import VKBottle
from vkbottle import GroupEventType, GroupTypes, Keyboard, ABCHandler, ABCView, \
    BaseMiddleware, \
    CtxStorage, Text
from vkbottle.bot import Bot, Message
from vkbottle_types.objects import UsersUserXtrCounters

# Import classes
import classes.mysql
import classes.timer

# Import data
import data.general
import data.timers

# Define
MySQL = classes.mysql.MySQL()
UserAction = classes.mysql.UserAction()
MainData = classes.mysql.MainData()
dummy_db = CtxStorage()
config = configparser.ConfigParser()
config.read("config/vk.ini")
timer = classes.timer
general = data.general.General()

# Logs settings
logging.basicConfig(filename="logs/logs.log")
logging.basicConfig(level=logging.INFO)

# VK ConnectionTypeError: __init__() takes 1 positional argument but 5 were given

bot = Bot(config["VK_DATA"]["GROUP_TOKEN"])

# Keyboards
START_KEYBOARD = (
    Keyboard(one_time=False).add(Text("‚ùì –ü–æ–º–æ—â—å", payload={"cmd": "cmd_help"})).get_json()
)

MAIN_KEYBOARD = Keyboard(one_time=False, inline=False).schema(
    [
        [
            {"label": "üìí –ü—Ä–æ—Ñ–∏–ª—å", "type": "text", "payload": {"cmd": "cmd_profile"}, "color": "primary"},
            {"label": "üí≤ –ë–∞–ª–∞–Ω—Å", "type": "text", "payload": {"cmd": "cmd_balance"}, "color": "secondary"},
            {"label": "üëë –†–µ–π—Ç–∏–Ω–≥", "type": "text", "payload": {"cmd": "cmd_rating"}, "color": "secondary"}
        ],
        [
            {"label": "üõç –ú–∞–≥–∞–∑–∏–Ω", "type": "text", "payload": {"cmd": "cmd_shop"}, "color": "secondary"},
            {"label": "üí∞ –ë–∞–Ω–∫", "type": "text", "payload": {"cmd": "cmd_bank"}, "color": "secondary"}
        ],
        [
            {"label": "‚ùì –ü–æ–º–æ—â—å", "type": "text", "payload": {"cmd": "cmd_help"}, "color": "secondary"},
            {"label": "üí° –†–∞–∑–Ω–æ–µ", "type": "text", "payload": {"cmd": "cmd_other"}, "color": "secondary"}
        ],
        [
            {"label": "üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", "type": "text", "payload": {"cmd": "cmd_bonus"}, "color": "positive"}
        ]
    ]
).get_json()

OTHER_KEYBOARD = Keyboard(one_time=False, inline=False).schema(
    [
        [
            {"label": "üöÄ –ò–≥—Ä—ã", "type": "text", "payload": {"cmd": "cmd_games"}, "color": "secondary"},
            {"label": "üñ® –†–µ—à–∏", "type": "text", "payload": {"cmd": "cmd_equation"}, "color": "secondary"},
            {"label": "üìä –ö—É—Ä—Å", "type": "text", "payload": {"cmd": "cmd_course"}, "color": "secondary"}
        ],
        [
            {"label": "üèÜ –¢–æ–ø", "type": "text", "payload": {"cmd": "cmd_top"}, "color": "secondary"},
            {"label": "ü§ù –ü–µ—Ä–µ–¥–∞—Ç—å", "type": "text", "payload": {"cmd": "cmd_transfer"}, "color": "secondary"}
        ],
        [
            {"label": "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "type": "text", "payload": {"cmd": "cmd_settings"}, "color": "primary"},
            {"label": "‚óÄ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "type": "text", "payload": {"cmd": "cmd_mainmenu"}, "color": "positive"}
        ]
    ]
).get_json()

GAMES_KEYBOARD = Keyboard(one_time=False, inline=False).schema(
    [
        [
            {"label": "üî´ –†—É–ª–µ—Ç–∫–∞", "type": "text", "payload": {"cmd": "game_roulette"}, "color": "secondary"},
            {"label": "üé≤ –ö—É–±–∏–∫", "type": "text", "payload": {"cmd": "game_cube"}, "color": "secondary"},
            {"label": "üé∞ –ö–∞–∑–∏–Ω–æ", "type": "text", "payload": {"cmd": "game_casino"}, "color": "secondary"}
        ],
        [
            {"label": "üìà –¢—Ä–µ–π–¥", "type": "text", "payload": {"cmd": "game_trade"}, "color": "secondary"},
            {"label": "ü•õ –°—Ç–∞–∫–∞–Ω—á–∏–∫", "type": "text", "payload": {"cmd": "game_cup"}, "color": "secondary"},
            {"label": "ü¶Ö –ú–æ–Ω–µ—Ç–∫–∞", "type": "text", "payload": {"cmd": "game_coin"}, "color": "secondary"}
        ],
        [
            {"label": "‚óÄ –í —Ä–∞–∑–¥–µ–ª \"—Ä–∞–∑–Ω–æ–µ\"", "type": "text", "payload": {"cmd": "cmd_other"}, "color": "positive"}
        ]
    ]
).get_json()

GAME_ROULETTE_KEYBOARD = Keyboard(one_time=False, inline=False).schema(
    [
        [
            {"label": "üî´ –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å", "type": "text", "payload": {"cmd": "game_roulette_shot"}, "color": "secondary"},
            {"label": "üíµ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", "type": "text", "payload": {"cmd": "game_roulette_stop"},
             "color": "secondary"},
        ],
        [
            {"label": "‚óÄ –ò–≥—Ä—ã", "type": "text", "payload": {"cmd": "cmd_games"}, "color": "positive"}
        ]
    ]
).get_json()

GAME_CUBE_KEYBOARD = Keyboard(one_time=False, inline=False).schema(
    [
        [
            {"label": "üé≤ 1", "type": "text", "payload": {"cmd": "game_cube_1"}, "color": "secondary"},
            {"label": "üé≤ 2", "type": "text", "payload": {"cmd": "game_cube_2"}, "color": "secondary"},
            {"label": "üé≤ 3", "type": "text", "payload": {"cmd": "game_cube_3"}, "color": "secondary"}
        ],
        [
            {"label": "üé≤ 4", "type": "text", "payload": {"cmd": "game_cube_4"}, "color": "secondary"},
            {"label": "üé≤ 5", "type": "text", "payload": {"cmd": "game_cube_5"}, "color": "secondary"},
            {"label": "üé≤ 6", "type": "text", "payload": {"cmd": "game_cube_6"}, "color": "secondary"}
        ],
        [
            {"label": "‚óÄ –ò–≥—Ä—ã", "type": "text", "payload": {"cmd": "cmd_games"}, "color": "positive"}
        ]
    ]
).get_json()

GAME_COIN_KEYBOARD = Keyboard(one_time=False, inline=False).schema(
    [
        [
            {"label": "ü¶Ö –û—Ä–µ–ª", "type": "text", "payload": {"cmd": "game_coin_1"}, "color": "secondary"},
            {"label": "üóÇ –†–µ—à–∫–∞", "type": "text", "payload": {"cmd": "game_coin_2"}, "color": "secondary"},
        ],
        [
            {"label": "‚óÄ –ò–≥—Ä—ã", "type": "text", "payload": {"cmd": "cmd_games"}, "color": "positive"}
        ]
    ]
).get_json()


# Subs classes
class NoBotMiddleware(BaseMiddleware):
    async def pre(self, message: Message):
        return message.from_id > 0  # True / False


# noinspection PyTypeChecker
class RegistrationMiddleware(BaseMiddleware):
    async def pre(self, message: Message):
        user = dummy_db.get(message.from_id)
        if user is None:
            user = (await bot.api.users.get(message.from_id))[0]
            dummy_db.set(message.from_id, user)
        return {"info": user}


class InfoMiddleware(BaseMiddleware):
    async def post(
            self,
            message: Message,
            view: "ABCView",
            handle_responses: List[Any],
            handlers: List["ABCHandler"],
    ):
        if not handlers:
            return


fliptext_dict = {'q': 'q', 'w': ' ç', 'e': '«ù', 'r': '…π', 't': ' á', 'y': ' é', 'u': 'u', 'i': '·¥â', 'o': 'o', 'p': 'p',
                 'a': '…ê', 's': 's', 'd': 'd', 'f': '…ü', 'g': '∆É', 'h': '…•', 'j': '…æ', 'k': ' û', 'l': 'l', 'z': 'z',
                 'x': 'x', 'c': '…î', 'v': ' å', 'b': 'b', 'n': 'n', 'm': '…Ø',
                 '–π': '≈Ü', '—Ü': '«π', '—É': ' é', '–∫': ' û', '–µ': '«ù', '–Ω': '–Ω', '–≥': '…π', '—à': 'm', '—â': 'm', '–∑': 'Œµ',
                 '—Ö': '—Ö', '—ä': 'q', '—Ñ': '—Ñ', '—ã': 'ƒ±q', '–≤': ' ö', '–∞': '…ê', '–ø': 'u', '—Ä': 'd', '–æ': '–æ', '–ª': 'v',
                 '–¥': '…ì', '–∂': '–∂', '—ç': '—î', '—è': ' Å', '—á': '“ª', '—Å': '…î', '–º': 'w', '–∏': '–∏', '—Ç': '…Ø', '—å': 'q',
                 '–±': '∆ç', '—é': 'oƒ±'}

# Timers
timer.RepeatedTimer(3600, data.timers.Timers.hour_timer).start()


# User commands
@bot.on.message(text=["–ù–∞—á–∞—Ç—å", "–°—Ç–∞—Ä—Ç", "–Ω–∞—á–∞—Ç—å", "—Å—Ç–∞—Ä—Ç"])
@bot.on.message(payload={"cmd": "cmd_start"})
async def start_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n"
                             f"–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        await message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \"–ü–æ–º–æ—â—å\", –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ "
                             f"–∫–æ–º–∞–Ω–¥")


@bot.on.message(text=["–ü–æ–º–æ—â—å", "–ø–æ–º–æ—â—å"])
@bot.on.message(payload={"cmd": "cmd_help"})
async def help_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n"
                             f"–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        await message.answer(f"@id{message.from_id} ({info.first_name}), –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\nüéâ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ:\n‚†Ä‚†Äüòê "
                             f"–ê–Ω–µ–∫–¥–æ—Ç\n‚†Ä‚†Ä‚Ü™ –ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ [—Ñ—Ä–∞–∑–∞]\n‚†Ä‚†ÄüîÆ –®–∞—Ä [—Ñ—Ä–∞–∑–∞]\n‚†Ä‚†Äüìä –ò–Ω—Ñ–∞ [—Ñ—Ä–∞–∑–∞]\n‚†Ä‚†Ä‚öñ –í—ã–±–µ—Ä–∏ [—Ñ—Ä–∞–∑–∞] "
                             f"–∏–ª–∏ [—Ñ—Ä–∞–∑–∞2]\n\nüöÄ –ò–≥—Ä—ã:\n‚†Ä‚†Äüé≤ –ö—É–±–∏–∫ [1-6]\n‚†Ä‚†Äüé∞ –ö–∞–∑–∏–Ω–æ [—Å—É–º–º–∞]\n‚†Ä‚†Äüìà –¢—Ä–µ–π–¥ ["
                             f"–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑] [—Å—É–º–º–∞]\n‚†Ä‚†Äü•õ –°—Ç–∞–∫–∞–Ω—á–∏–∫ [1-3] [—Å—É–º–º–∞]\n‚†Ä‚†Äü¶Ö –ú–æ–Ω–µ—Ç–∫–∞ [–æ—Ä—ë–ª/—Ä–µ—à–∫–∞] ["
                             f"—Å—É–º–º–∞]\n‚†Ä‚†Äüì¶ –ö–µ–π—Å—ã\n\nüíº –ë–∏–∑–Ω–µ—Å:\n‚†Ä‚†ÄüìÉ –ë–∏–∑–Ω–µ—Å—ã [1/2] - —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤\n‚†Ä‚†Äüìà –ë–∏–∑–Ω–µ—Å - "
                             f"—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚†Ä‚†Äüíµ –ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å [–∫–æ–ª-–≤–æ] - —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å–æ —Å—á—ë—Ç–∞\n‚†Ä‚†Äüë∑ –ë–∏–∑–Ω–µ—Å –Ω–∞–Ω—è—Ç—å - "
                             f"–Ω–∞–Ω—è—Ç—å —Ä–∞–±–æ—á–∏—Ö\n\nüåΩ –ü–∏—Ç–æ–º—Ü—ã:\n‚†Ä‚†Äüêí –ü–∏—Ç–æ–º–µ—Ü - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n‚†Ä‚†Äüê™ –ü–∏—Ç–æ–º–µ—Ü –ø–æ—Ö–æ–¥\n‚†Ä‚†Äüåü "
                             f"–ü–∏—Ç–æ–º–µ—Ü —É–ª—É—á—à–∏—Ç—å\n\nüî• –ü–æ–ª–µ–∑–Ω–æ–µ:\n‚†Ä‚†Äüì† –†–µ—à–∏ [–ø—Ä–∏–º–µ—Ä]\n‚†Ä‚†Äüìä –ö—É—Ä—Å\n‚†Ä‚†ÄüÜï /–∫–Ω–æ–ø–∫–∏\n\nüí° "
                             f"–†–∞–∑–Ω–æ–µ:\n‚†Ä‚†Äüìí –ü—Ä–æ—Ñ–∏–ª—å\n‚†Ä‚†Ä‚öî –ö–ª–∞–Ω\n‚†Ä‚†Äüçπ –ó–µ–ª—å—è\n‚†Ä‚†Äüí≤ –ë–∞–ª–∞–Ω—Å\n‚†Ä‚†Äüí∞ –ë–∞–Ω–∫\n‚†Ä‚†Äüí≥ –ë–∞–Ω–∫ –ø–æ–º–æ—â—å - –≤—Å–µ "
                             f"–∫–æ–º–∞–Ω–¥—ã –±–∞–Ω–∫–∞\n‚†Ä‚†Äüëë –†–µ–π—Ç–∏–Ω–≥ - –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥\n‚†Ä‚†ÄüèÜ –¢–æ–ø\n‚†Ä‚†Ä‚úí –ù–∏–∫ [–Ω–∏–∫/–≤–∫–ª/–≤—ã–∫–ª]\n‚†Ä‚†Äüõç "
                             f"–ú–∞–≥–∞–∑–∏–Ω\n‚†Ä‚†Äüí∏ –ü—Ä–æ–¥–∞—Ç—å [–ø—Ä–µ–¥–º–µ—Ç]\n‚†Ä‚†Äüîã –§–µ—Ä–º–∞ - –±–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º–∞\n‚†Ä‚†Äü§ù –ü–µ—Ä–µ–¥–∞—Ç—å [ID] ["
                             f"—Å—É–º–º–∞]\n‚†Ä‚†Äüíé –ë–æ–Ω—É—Å - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n‚†Ä‚†Äüë• –†–µn\n‚†Ä‚†ÄüèÜ –†–µ—Ñ —Ç–æ–ø\n‚†Ä‚†ÄüéÅ –î–æ–Ω–∞—Ç\n\nüÜò –†–µ–ø–æ—Ä—Ç ["
                             f"—Ñ—Ä–∞–∑–∞] - –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è", keyboard=MAIN_KEYBOARD)


@bot.on.message(text=["–ü—Ä–æ—Ñ–∏–ª—å", "–ø—Ä–æ—Ñ–∏–ª—å"])
@bot.on.message(payload={"cmd": "cmd_profile"})
async def profile_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n"
                             f"–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        user = UserAction.get_user(message.from_id)

        temp_message = f'@id{message.from_id} ({info.first_name}), –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n'
        temp_message += f'üîé ID: {user[0]["ID"]}\n'
        # Check RankLevel
        if user[0]["RankLevel"] == 2:
            temp_message += f'üî• VIP –∏–≥—Ä–æ–∫\n'
        elif user[0]["RankLevel"] == 3:
            temp_message += f'üîÆ Premium –∏–≥—Ä–æ–∫\n'
        elif user[0]["RankLevel"] == 4:
            temp_message += f'üåÄ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä\n'
        elif user[0]["RankLevel"] >= 5:
            temp_message += f'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n'
        # Basic check
        if user[0]["EXP"] > 0:
            temp_message += f'‚≠ê –û–ø—ã—Ç–∞: {general.change_number(user[0]["EXP"])}\n'
        if user[0]["Money"] > 0:
            temp_message += f'üí∞ –î–µ–Ω–µ–≥: {general.change_number(user[0]["Money"])}$\n'
        if user[0]["BTC"] > 0:
            temp_message += f'üåê –ë–∏—Ç–∫–æ–∏–Ω–æ–≤: {general.change_number(user[0]["BTC"])}‚Çø\n'
        if user[0]["Rating"] > 0:
            temp_message += f'üëë –†–µ–π—Ç–∏–Ω–≥: {general.change_number(user[0]["Rating"])}\n'
        # Property
        temp_message += f'\nüîë –ò–º—É—â–µ—Å—Ç–≤–æ:\n'
        if user[1]["Car"] > 0:
            temp_message += f'‚†Äüöó –ú–∞—à–∏–Ω–∞: {MainData.get_data("cars")[user[1]["Car"] - 1]["CarName"]}\n'
        if user[1]["Yacht"] > 0:
            temp_message += f'‚†Äüõ• –Ø—Ö—Ç–∞: {MainData.get_data("yachts")[user[1]["Yacht"] - 1]["YachtName"]}\n'
        if user[1]["Airplane"] > 0:
            temp_message += f'‚†Ä‚úà –°–∞–º–æ–ª–µ—Ç: ' \
                            f'{MainData.get_data("airplanes")[user[1]["Airplane"] - 1]["AirplaneName"]}\n'
        if user[1]["Helicopter"] > 0:
            temp_message += f'‚†ÄüöÅ –í–µ—Ä—Ç–æ–ª–µ—Ç: ' \
                            f'{MainData.get_data("helicopters")[user[1]["Helicopter"] - 1]["HelicopterName"]}\n'
        if user[1]["House"] > 0:
            temp_message += f'‚†Äüè† –î–æ–º: {MainData.get_data("houses")[user[1]["House"] - 1]["HouseName"]}\n'
        if user[1]["Apartment"] > 0:
            temp_message += f'‚†Äüåá –ö–≤–∞—Ä—Ç–∏—Ä–∞: ' \
                            f'{MainData.get_data("apartments")[user[1]["Apartment"] - 1]["ApartmentName"]}\n'
        if user[1]["Business"] > 0:
            temp_message += f'‚†Äüíº –ë–∏–∑–Ω–µ—Å: ' \
                            f'{MainData.get_data("businesses")[user[1]["Business"] - 1]["BusinessName"]}\n'
        if user[1]["Pet"] > 0:
            temp_message += f'‚†Ä{MainData.get_data("pets")[user[1]["Pet"] - 1]["PetIcon"]} –ü–∏—Ç–æ–º–µ—Ü: ' \
                            f'{MainData.get_data("pets")[user[1]["Pet"] - 1]["PetName"]}\n'
        if user[1]["Farms"] > 0:
            temp_message += f'‚†Äüîã –§–µ—Ä–º—ã: {MainData.get_data("farms")[user[1]["FarmsType"] - 1]["FarmName"]} ' \
                            f'({general.change_number(user[1]["Farms"])} —à—Ç.)\n'
        if user[1]["Phone"] > 0:
            temp_message += f'‚†Äüì± –¢–µ–ª–µ—Ñ–æ–Ω: {MainData.get_data("phones")[user[1]["Phone"] - 1]["PhoneName"]}\n'

        temp_message += f'\nüìó –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[0]["Register_Data"].strftime("%d.%m.%Y, %H:%M:%S")}\n'
        await message.answer(temp_message)


@bot.on.message(text=["–ë–∞–Ω–∫", "–±–∞–Ω–∫"])
@bot.on.message(text=["–ë–∞–Ω–∫ <item1>", "–±–∞–Ω–∫ <item1>"])
@bot.on.message(text=["–ë–∞–Ω–∫ <item1> <item2:int>", "–±–∞–Ω–∫ <item1> <item2:int>"])
@bot.on.message(payload={"cmd": "cmd_bank"})
async def bank_handler(message: Message, info: UsersUserXtrCounters, item1: Optional[str] = None,
                       item2: Optional[int] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n"
                             f"–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        user = UserAction.get_user(message.from_id)
        if item1 is None and item2 is None:
            await message.answer(
                f'@id{message.from_id} ({info.first_name}), –Ω–∞ –í–∞—à–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ: {general.change_number(user[0]["Bank_Money"])}$')
        elif item1 == "–ø–æ–ª–æ–∂–∏—Ç—å":
            if item2 is None or not general.isint(item2):
                await message.answer(f'@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–±–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å [—Å—É–º–º–∞], '
                                     f'—á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á–µ—Ç')
            else:
                if user[0]["Money"] < item2:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                else:
                    user[0]["Bank_Money"] += item2
                    user[0]["Money"] -= item2
                    UserAction.save_user(message.from_id, user)
                    await message.answer(
                        f'@id{message.from_id} ({info.first_name}), –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –Ω–∞ '
                        f'{general.change_number(item2)}$')
        elif item1 == "—Å–Ω—è—Ç—å":
            if item2 is None or not general.isint(item2):
                await message.answer(f'@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–±–∞–Ω–∫ —Å–Ω—è—Ç—å [—Å—É–º–º–∞], '
                                     f'—á—Ç–æ–±—ã —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å–æ —Å—á–µ—Ç–∞')
            else:
                if user[0]["Bank_Money"] < item2:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), –Ω–∞ –í–∞—à–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ –Ω–µ—Ç '
                                         f'—Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                else:
                    user[0]["Bank_Money"] -= item2
                    user[0]["Money"] += item2
                    UserAction.save_user(message.from_id, user)
                    await message.answer(
                        f'@id{message.from_id} ({info.first_name}), –í—ã —Å–Ω—è–ª–∏ —Å–æ —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ '
                        f'{general.change_number(item2)}$')
        else:
            await message.answer(f'@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–±–∞–Ω–∫ [–ø–æ–ª–æ–∂–∏—Ç—å/—Å–Ω—è—Ç—å] [—Å—É–º–º–∞]'
                                 f'"')


@bot.on.message(text=["–ú–∞–≥–∞–∑–∏–Ω", "–º–∞–≥–∞–∑–∏–Ω"])
@bot.on.message(text=["–ú–∞–≥–∞–∑–∏–Ω <category>", "–º–∞–≥–∞–∑–∏–Ω <category>"])
@bot.on.message(text=["–ú–∞–≥–∞–∑–∏–Ω <category> –∫—É–ø–∏—Ç—å <product>", "–º–∞–≥–∞–∑–∏–Ω <category> –∫—É–ø–∏—Ç—å <product>"])
@bot.on.message(
    text=["–ú–∞–≥–∞–∑–∏–Ω <category> –∫—É–ø–∏—Ç—å <product> <count:int>", "–º–∞–≥–∞–∑–∏–Ω <category> –∫—É–ø–∏—Ç—å <product> <count:int>"])
@bot.on.message(payload={"cmd": "cmd_shop"})
async def shop_handler(message: Message, info: UsersUserXtrCounters, category: Optional[str] = None,
                       product: Optional[str] = None, count: Optional[int] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n"
                             f"–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        user = UserAction.get_user(message.from_id)
        shop_data = MainData.get_shop_data()
        temp_text = ''
        if category is None:
            await message.answer(f'@id{message.from_id} ({info.first_name}), —Ä–∞–∑–¥–µ–ª—ã –º–∞–≥–∞–∑–∏–Ω–∞:\n'
                                 f'üöô –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:\n'
                                 f'‚†Äüöó –ú–∞—à–∏–Ω—ã\n'
                                 f'‚†Äüõ• –Ø—Ö—Ç—ã\n'
                                 f'‚†Äüõ© –°–∞–º–æ–ª–µ—Ç—ã\n'
                                 f'‚†ÄüöÅ –í–µ—Ä—Ç–æ–ª–µ—Ç—ã\n'
                                 f'\nüèò –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:\n'
                                 f'‚†Äüè† –î–æ–º–∞\n'
                                 f'‚†Äüåá –ö–≤–∞—Ä—Ç–∏—Ä—ã\n'
                                 f'\nüìå –û—Å—Ç–∞–ª—å–Ω–æ–µ:\n'
                                 f'‚†Äüì± –¢–µ–ª–µ—Ñ–æ–Ω—ã\n'
                                 f'‚†Äüîã –§–µ—Ä–º—ã\n'
                                 f'‚†Äüëë –†–µ–π—Ç–∏–Ω–≥ [–∫–æ–ª-–≤–æ]‚†Ä‚†Ä{general.change_number(1000000)}$/–µ–¥.\n'
                                 f'‚†Äüíº –ë–∏–∑–Ω–µ—Å—ã\n'
                                 f'‚†Äüåê –ë–∏—Ç–∫–æ–∏–Ω [–∫–æ–ª-–≤–æ]‚†Ä‚†Ä{general.change_number(MainData.get_settings()[0]["BTC_USD_Curse"])}$/–µ–¥.\n'
                                 f'‚†Äüê∏ –ü–∏—Ç–æ–º—Ü—ã'
                                 f'\nüîé –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–º–∞–≥–∞–∑–∏–Ω [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]".\n'
                                 f'üîé –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–º–∞–≥–∞–∑–∏–Ω [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] –∫—É–ø–∏—Ç—å [–Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞]".\n')
        elif category.lower() == '–º–∞—à–∏–Ω—ã':
            if product is None:
                for car in shop_data[0]:
                    temp_text += f'\nüî∏ {car["ID"]}. {car["CarName"]} [{general.change_number(car["CarPrice"])}$]'
                await message.answer(f'@id{message.from_id} ({info.first_name}), –º–∞—à–∏–Ω—ã: {temp_text}\n\n '
                                     f'‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–º–∞–≥–∞–∑–∏–Ω –º–∞—à–∏–Ω—ã –∫—É–ø–∏—Ç—å [–Ω–æ–º–µ—Ä]"')
            else:
                if user[1]["Car"] > 0:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å –º–∞—à–∏–Ω–∞! –î–ª—è –ø–æ–∫—É–ø–∫–∏'
                                         f', –ø—Ä–æ–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—É—é: –ø—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω–∞!')
                else:
                    if user[0]["Money"] < shop_data[0][int(product) - 1]["CarPrice"]:
                        await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                    else:
                        user[0]["Money"] -= shop_data[0][int(product) - 1]["CarPrice"]
                        user[1]["Car"] = product
                        UserAction.save_user(message.from_id, user)
                        await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–±–µ '
                                             f'{shop_data[0][int(product) - 1]["CarName"]} –∑–∞ '
                                             f'{general.change_number(shop_data[0][int(product) - 1]["CarPrice"])}$')
        elif category.lower() == '—è—Ö—Ç—ã':
            if product is None:
                for yacht in shop_data[1]:
                    temp_text += f'\nüî∏ {yacht["ID"]}. {yacht["YachtName"]} [{general.change_number(yacht["YachtPrice"])}$]'
                await message.answer(f'@id{message.from_id} ({info.first_name}), —è—Ö—Ç—ã: {temp_text}\n\n '
                                     f'‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–º–∞–≥–∞–∑–∏–Ω —è—Ö—Ç—ã –∫—É–ø–∏—Ç—å [–Ω–æ–º–µ—Ä]"')
            else:
                if user[1]["Yacht"] > 0:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å —è—Ö—Ç–∞! –î–ª—è –ø–æ–∫—É–ø–∫–∏'
                                         f', –ø—Ä–æ–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—É—é: –ø—Ä–æ–¥–∞—Ç—å —è—Ö—Ç–∞!')
                else:
                    if user[0]["Money"] < shop_data[1][int(product) - 1]["YachtPrice"]:
                        await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                    else:
                        user[0]["Money"] -= shop_data[1][int(product) - 1]["YachtPrice"]
                        user[1]["Yacht"] = product
                        UserAction.save_user(message.from_id, user)
                        await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–±–µ '
                                             f'{shop_data[1][int(product) - 1]["YachtName"]} –∑–∞ '
                                             f'{general.change_number(shop_data[1][int(product) - 1]["YachtPrice"])}$')
        elif category.lower() == '—Å–∞–º–æ–ª–µ—Ç—ã':
            if product is None:
                for airplane in shop_data[2]:
                    temp_text += f'\nüî∏ {airplane["ID"]}. {airplane["AirplaneName"]} ' \
                                 f'[{general.change_number(airplane["AirplanePrice"])}$]'
                await message.answer(f'@id{message.from_id} ({info.first_name}), —Å–∞–º–æ–ª–µ—Ç—ã: {temp_text}\n\n '
                                     f'‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–º–∞–≥–∞–∑–∏–Ω —Å–∞–º–æ–ª–µ—Ç—ã –∫—É–ø–∏—Ç—å [–Ω–æ–º–µ—Ä]"')
            else:
                if user[1]["Airplane"] > 0:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–∞–º–æ–ª–µ—Ç! –î–ª—è '
                                         f'–ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—ã–π: –ø—Ä–æ–¥–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç!')
                else:
                    if user[0]["Money"] < shop_data[2][int(product) - 1]["AirplanePrice"]:
                        await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                    else:
                        user[0]["Money"] -= shop_data[2][int(product) - 1]["AirplanePrice"]
                        user[1]["Airplane"] = product
                        UserAction.save_user(message.from_id, user)
                        await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–±–µ '
                                             f'{shop_data[2][int(product) - 1]["AirplaneName"]} –∑–∞ '
                                             f'{general.change_number(shop_data[2][int(product) - 1]["AirplanePrice"])}$')
        elif category.lower() == '–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã':
            if product is None:
                for helicopters in shop_data[3]:
                    temp_text += f'\nüî∏ {helicopters["ID"]}. {helicopters["HelicopterName"]} ' \
                                 f'[{general.change_number(helicopters["HelicopterPrice"])}$]'
                await message.answer(f'@id{message.from_id} ({info.first_name}), –≤–µ—Ä—Ç–æ–ª–µ—Ç—ã: {temp_text}\n\n '
                                     f'‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–º–∞–≥–∞–∑–∏–Ω –≤–µ—Ä—Ç–æ–ª–µ—Ç—ã –∫—É–ø–∏—Ç—å [–Ω–æ–º–µ—Ä]"')
            else:
                if user[1]["Helicopter"] > 0:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç! –î–ª—è '
                                         f'–ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—ã–π: –ø—Ä–æ–¥–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç!')
                else:
                    if user[0]["Money"] < shop_data[3][int(product) - 1]["HelicopterPrice"]:
                        await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                    else:
                        user[0]["Money"] -= shop_data[3][int(product) - 1]["HelicopterPrice"]
                        user[1]["Helicopter"] = product
                        UserAction.save_user(message.from_id, user)
                        await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–±–µ '
                                             f'{shop_data[3][int(product) - 1]["HelicopterName"]} –∑–∞ '
                                             f'{general.change_number(shop_data[3][int(product) - 1]["HelicopterPrice"])}$')
        elif category.lower() == '–¥–æ–º–∞':
            if product is None:
                for houses in shop_data[4]:
                    temp_text += f'\nüî∏ {houses["ID"]}. {houses["HouseName"]} ' \
                                 f'[{general.change_number(houses["HousePrice"])}$]'
                await message.answer(f'@id{message.from_id} ({info.first_name}), –¥–æ–º–∞: {temp_text}\n\n '
                                     f'‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–º–∞–≥–∞–∑–∏–Ω –¥–æ–º–∞ –∫—É–ø–∏—Ç—å [–Ω–æ–º–µ—Ä]"')
            else:
                if user[1]["House"] > 0:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–º! –î–ª—è –ø–æ–∫—É–ø–∫–∏'
                                         f', –ø—Ä–æ–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—ã–π: –ø—Ä–æ–¥–∞—Ç—å –¥–æ–º!')
                else:
                    if user[0]["Money"] < shop_data[4][int(product) - 1]["HousePrice"]:
                        await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                    else:
                        user[0]["Money"] -= shop_data[4][int(product) - 1]["HousePrice"]
                        user[1]["House"] = product
                        UserAction.save_user(message.from_id, user)
                        await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–±–µ '
                                             f'{shop_data[4][int(product) - 1]["HouseName"]} –∑–∞ '
                                             f'{general.change_number(shop_data[4][int(product) - 1]["HousePrice"])}$')
        elif category.lower() == '–∫–≤–∞—Ä—Ç–∏—Ä—ã':
            if product is None:
                for apartments in shop_data[5]:
                    temp_text += f'\nüî∏ {apartments["ID"]}. {apartments["ApartmentName"]} ' \
                                 f'[{general.change_number(apartments["ApartmentPrice"])}$]'
                await message.answer(f'@id{message.from_id} ({info.first_name}), –∫–≤–∞—Ä—Ç–∏—Ä—ã: {temp_text}\n\n '
                                     f'‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–º–∞–≥–∞–∑–∏–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã –∫—É–ø–∏—Ç—å [–Ω–æ–º–µ—Ä]"')
            else:
                if user[1]["Apartment"] > 0:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–∞! –î–ª—è '
                                         f'–ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—É—é: –ø—Ä–æ–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–∞!')
                else:
                    if user[0]["Money"] < shop_data[5][int(product) - 1]["ApartmentPrice"]:
                        await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                    else:
                        user[0]["Money"] -= shop_data[5][int(product) - 1]["ApartmentPrice"]
                        user[1]["Apartment"] = product
                        UserAction.save_user(message.from_id, user)
                        await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–±–µ '
                                             f'{shop_data[5][int(product) - 1]["ApartmentName"]} –∑–∞ '
                                             f'{general.change_number(shop_data[5][int(product) - 1]["ApartmentPrice"])}$')
        elif category.lower() == '—Ç–µ–ª–µ—Ñ–æ–Ω—ã':
            if product is None:
                for phones in shop_data[6]:
                    temp_text += f'\nüî∏ {phones["ID"]}. {phones["PhoneName"]} ' \
                                 f'[{general.change_number(phones["PhonePrice"])}$]'
                await message.answer(f'@id{message.from_id} ({info.first_name}), —Ç–µ–ª–µ—Ñ–æ–Ω—ã: {temp_text}\n\n '
                                     f'‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–º–∞–≥–∞–∑–∏–Ω —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∫—É–ø–∏—Ç—å [–Ω–æ–º–µ—Ä]"')
            else:
                if user[1]["Phone"] > 0:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω! –î–ª—è –ø–æ–∫—É–ø–∫–∏'
                                         f', –ø—Ä–æ–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—ã–π: –ø—Ä–æ–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω!')
                else:
                    if user[0]["Money"] < shop_data[6][int(product) - 1]["PhonePrice"]:
                        await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                    else:
                        user[0]["Money"] -= shop_data[6][int(product) - 1]["PhonePrice"]
                        user[1]["Phone"] = product
                        UserAction.save_user(message.from_id, user)
                        await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–±–µ '
                                             f'{shop_data[6][int(product) - 1]["PhoneName"]} –∑–∞ '
                                             f'{general.change_number(shop_data[6][int(product) - 1]["PhonePrice"])}$')
        elif category.lower() == '—Ñ–µ—Ä–º—ã':
            if product is None:
                for farms in MainData.get_data("farms"):
                    temp_text += f'\nüî∏ {farms["ID"]}. {farms["FarmName"]} - {farms["FarmBTCPerHour"]} ‚Çø/—á–∞—Å ' \
                                 f'[{general.change_number(farms["FarmPrice"])}$]'
                await message.answer(f'@id{message.from_id} ({info.first_name}), —Ñ–µ—Ä–º—ã: {temp_text}\n\n '
                                     f'‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–º–∞–≥–∞–∑–∏–Ω —Ñ–µ—Ä–º—ã –∫—É–ø–∏—Ç—å [–Ω–æ–º–µ—Ä]"')
            else:
                if count is None:
                    if user[0]["Money"] < shop_data[7][int(product) - 1]["FarmPrice"]:
                        await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                    else:
                        user[0]["Money"] -= shop_data[7][int(product) - 1]["FarmPrice"]
                        user[1]["Farms"] += 1
                        user[1]["FarmsType"] = product
                        UserAction.save_user(message.from_id, user)
                        await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–±–µ '
                                             f'{shop_data[7][int(product) - 1]["FarmName"]} –∑–∞ '
                                             f'{general.change_number(shop_data[7][int(product) - 1]["FarmPrice"])}$')
                else:
                    if user[0]["Money"] < shop_data[7][int(product) - 1]["FarmPrice"] * count:
                        await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                    else:
                        user[0]["Money"] -= shop_data[7][int(product) - 1]["FarmPrice"] * count
                        user[1]["Farms"] += count
                        user[1]["FarmsType"] = product
                        UserAction.save_user(message.from_id, user)
                        await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–±–µ '
                                             f'{general.change_number(count)} —Ñ–µ—Ä–º(—ã) '
                                             f'{shop_data[7][int(product) - 1]["FarmName"]} –∑–∞ '
                                             f'{general.change_number(shop_data[7][int(product) - 1]["FarmPrice"] * count)}$')
        elif category.lower() == '—Ä–µ–π—Ç–∏–Ω–≥':
            if product is None:
                await message.answer(f'@id{message.from_id} ({info.first_name}), ‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–º–∞–≥–∞–∑–∏–Ω —Ä–µ–π—Ç–∏–Ω–≥'
                                     f' –∫—É–ø–∏—Ç—å [–∫–æ–ª-–≤–æ]"')
            else:
                if user[0]["Money"] < int(product) * 1000000:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                else:
                    user[0]["Money"] -= int(product) * 1000000
                    user[0]["Rating"] += int(product)
                    UserAction.save_user(message.from_id, user)
                    await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–±–µ '
                                         f'{product} —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–∞ {general.change_number(int(product) * 1000000)}$\n'
                                         f'–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {general.change_number(user[0]["Rating"])} üëë')
        elif category.lower() == '–±–∏–∑–Ω–µ—Å—ã':
            if product is None:
                for businesses in shop_data[8]:
                    temp_text += f'\nüî∏ {businesses["ID"]}. {businesses["BusinessName"]} ' \
                                 f'[{general.change_number(businesses["BusinessPrice"])}$]'
                await message.answer(f'@id{message.from_id} ({info.first_name}), –±–∏–∑–Ω–µ—Å—ã: {temp_text}\n\n '
                                     f'‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–º–∞–≥–∞–∑–∏–Ω –±–∏–∑–Ω–µ—Å—ã –∫—É–ø–∏—Ç—å [–Ω–æ–º–µ—Ä]"')
            else:
                if user[1]["Business"] > 0:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å! –î–ª—è –ø–æ–∫—É–ø–∫–∏'
                                         f', –ø—Ä–æ–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—ã–π: –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å!')
                else:
                    if user[0]["Money"] < shop_data[8][int(product) - 1]["BusinessPrice"]:
                        await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                    else:
                        user[0]["Money"] -= shop_data[8][int(product) - 1]["BusinessPrice"]
                        user[1]["Business"] = product
                        UserAction.save_user(message.from_id, user)
                        await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–±–µ '
                                             f'{shop_data[8][int(product) - 1]["BusinessName"]} –∑–∞ '
                                             f'{general.change_number(shop_data[8][int(product) - 1]["BusinessPrice"])}$')
        elif category.lower() == '–±–∏—Ç–∫–æ–∏–Ω':
            await message.answer(f'@id{message.from_id} ({info.first_name}), ‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–±–∏—Ç–∫–æ–∏–Ω [–∫–æ–ª-–≤–æ]"')
        elif category.lower() == '–ø–∏—Ç–æ–º—Ü—ã':
            if product is None:
                for pets in shop_data[9]:
                    temp_text += f'\nüî∏ {pets["ID"]}. {pets["PetIcon"]} {pets["PetName"]} ' \
                                 f'[{general.change_number(pets["PetPrice"])}$]'
                await message.answer(f'@id{message.from_id} ({info.first_name}), –ø–∏—Ç–æ–º—Ü—ã: {temp_text}\n\n '
                                     f'‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–º–∞–≥–∞–∑–∏–Ω –ø–∏—Ç–æ–º—Ü—ã –∫—É–ø–∏—Ç—å [–Ω–æ–º–µ—Ä]"')
            else:
                if user[1]["Pet"] > 0:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü! –î–ª—è '
                                         f'–ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–¥–∞–π—Ç–µ —Å—Ç–∞—Ä–æ–≥–æ: –ø—Ä–æ–¥–∞—Ç—å –ø–∏—Ç–æ–º–µ—Ü!')
                else:
                    if user[0]["Money"] < shop_data[9][int(product) - 1]["PetPrice"]:
                        await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                    else:
                        user[0]["Money"] -= shop_data[9][int(product) - 1]["PetPrice"]
                        user[1]["Pet"] = product
                        UserAction.save_user(message.from_id, user)
                        await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å–µ–±–µ '
                                             f'{shop_data[9][int(product) - 1]["PetIcon"]} '
                                             f'{shop_data[9][int(product) - 1]["PetName"]} –∑–∞ '
                                             f'{general.change_number(shop_data[9][int(product) - 1]["PetPrice"])}$')
        else:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")


@bot.on.message(text=["–ë–æ–Ω—É—Å", "–±–æ–Ω—É—Å"])
@bot.on.message(payload={"cmd": "cmd_bonus"})
async def bonus_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: "
                             f"{UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        user = UserAction.get_user(message.from_id)
        if user[0]["Bonus"] == 0:
            temp_money = random.randint(50, 500)
            temp_btc = random.randint(1, 50)
            if user[0]["RankLevel"] == 1:
                user[0]["Money"] += temp_money
                user[0]["Bonus"] = 24
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í–∞—à —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å '
                                     f'{general.change_number(temp_money)} $. '
                                     f'–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ {user[0]["Bonus"]} —á.')
            elif user[0]["RankLevel"] == 2:
                user[0]["Money"] += temp_money * 2
                user[0]["BTC"] += temp_btc
                user[0]["Bonus"] = 12
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í–∞—à —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å '
                                     f'{general.change_number(temp_money * 2)} $ '
                                     f'–∏ {temp_btc} ‚Çø. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ {user[0]["Bonus"]} —á.')
            elif user[0]["RankLevel"] == 3:
                user[0]["Money"] += temp_money * 3
                user[0]["BTC"] += temp_btc * 2
                user[0]["Bonus"] = 6
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í–∞—à —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å '
                                     f'{general.change_number(temp_money * 3)} $ '
                                     f'–∏ {general.change_number(temp_btc * 2)} ‚Çø. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ {user[0]["Bonus"]} '
                                     f' —á.')
            elif user[0]["RankLevel"] == 4:
                user[0]["Money"] += temp_money * 4
                user[0]["BTC"] += temp_btc * 3
                user[0]["Bonus"] = 3
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í–∞—à —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å '
                                     f'{general.change_number(temp_money * 4)} $ '
                                     f'–∏ {general.change_number(temp_btc * 3)} ‚Çø. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ {user[0]["Bonus"]} '
                                     f'—á.')
            elif user[0]["RankLevel"] >= 5:
                user[0]["Money"] += temp_money * 5
                user[0]["BTC"] += temp_btc * 4
                user[0]["Bonus"] = 1
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í–∞—à —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å '
                                     f'{general.change_number(temp_money * 5)} $ '
                                     f'–∏ {general.change_number(temp_btc * 4)} ‚Çø. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ {user[0]["Bonus"]} '
                                     f'—á.')
            UserAction.save_user(message.from_id, user)
        else:
            await message.answer(f'@id{message.from_id} ({info.first_name}), –í–∞–º –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–æ–Ω—É—Å! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å '
                                 f'—á–µ—Ä–µ–∑ {user[0]["Bonus"]} —á.')


@bot.on.message(text=["–ë–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å"])
@bot.on.message(payload={"cmd": "cmd_balance"})
async def balance_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: "
                             f"{UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        user = UserAction.get_user(message.from_id)
        await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–∞ —Ä—É–∫–∞—Ö '
                             f'{general.change_number(user[0]["Money"])}$\n'
                             f'üí≥ –í –±–∞–Ω–∫–µ: {general.change_number(user[0]["Bank_Money"])}$\n'
                             f'üåê –ë–∏—Ç–∫–æ–∏–Ω–æ–≤: {general.change_number(user[0]["BTC"])}‚Çø')


@bot.on.message(text=["–†–µ–π—Ç–∏–Ω–≥", "—Ä–µ–π—Ç–∏–Ω–≥"])
@bot.on.message(payload={"cmd": "cmd_rating"})
async def rating_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: "
                             f"{UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        user = UserAction.get_user(message.from_id)
        await message.answer(f'@id{message.from_id} ({info.first_name}), –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: '
                             f'{general.change_number(user[0]["Rating"])} üëë')


@bot.on.message(text=["–ü–µ—Ä–µ–¥–∞—Ç—å", "–ø–µ—Ä–µ–¥–∞—Ç—å"])
@bot.on.message(text=["–ü–µ—Ä–µ–¥–∞—Ç—å <gameid:int>", "–ø–µ—Ä–µ–¥–∞—Ç—å <gameid:int>"])
@bot.on.message(text=["–ü–µ—Ä–µ–¥–∞—Ç—å <gameid:int> <money:int>", "–ø–µ—Ä–µ–¥–∞—Ç—å <gameid:int> <money:int>"])
@bot.on.message(payload={"cmd": "cmd_transfer"})
async def transfer_handler(message: Message, info: UsersUserXtrCounters, gameid: Optional[int] = None,
                           money: Optional[int] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: "
                             f"{UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        user = UserAction.get_user(message.from_id)
        if gameid is None or money is None:
            await message.answer(f'@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ø–µ—Ä–µ–¥–∞—Ç—å [–∏–≥—Ä–æ–≤–æ–π ID] '
                                 f'[—Å—É–º–º–∞]", —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏')
        else:
            if user[0]["Money"] < money:
                await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
            elif not UserAction.get_user_by_gameid(gameid):
                await message.answer(f'@id{message.from_id} ({info.first_name}), —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
            elif gameid == user[0]["ID"]:
                await message.answer(f'@id{message.from_id} ({info.first_name}), '
                                     f'–Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!')
            else:
                transfer_user = UserAction.get_user_by_gameid(gameid)
                user[0]["Money"] -= money
                transfer_user[0]["Money"] += money
                UserAction.save_user(message.from_id, user)
                UserAction.save_user(transfer_user[0]["VK_ID"], transfer_user)
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ '
                                     f'{general.change_number(money)}$ –∏–≥—Ä–æ–∫—É @id{transfer_user[0]["VK_ID"]} '
                                     f'({transfer_user[0]["Name"]})')
                await message.answer(f'@id{transfer_user[0]["VK_ID"]} ({transfer_user[0]["Name"]}), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '
                                     f'@id{message.from_id} '
                                     f'({info.first_name}) –ø–µ—Ä–µ–≤–µ–ª –í–∞–º {general.change_number(money)}$',
                                     user_id=transfer_user[0]["VK_ID"])


@bot.on.message(text=["–í—ã–±–µ—Ä–∏ <item1> <item2>", "–≤—ã–±–µ—Ä–∏ <item1> <item2>"])
@bot.on.message(payload={"cmd": "cmd_selecttext"})
async def selecttext_handler(message: Message, info: UsersUserXtrCounters, item1: Optional[str] = None,
                             item2: Optional[str] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n"
                             f"–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        if item1 is None or item2 is None:
            await message.answer(
                f"@id{message.from_id} ({info.first_name}), –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≤—ã–±–µ—Ä–∏ \"—Ñ—Ä–∞–∑–∞ 1\" \"—Ñ—Ä–∞–∑–∞ 2\"")
        else:
            temp_var = random.randint(0, 1)
            if temp_var == 0:
                await message.answer(
                    f"@id{message.from_id} ({info.first_name}), –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è –ª—É—á—à–µ \"{item1}\", —á–µ–º \"{item2}\"")
            elif temp_var == 1:
                await message.answer(
                    f"@id{message.from_id} ({info.first_name}), –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è –ª—É—á—à–µ \"{item2}\", —á–µ–º \"{item1}\"")


@bot.on.message(text=["–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏", "–ø–µ—Ä–µ–≤–µ—Ä–Ω–∏"])
@bot.on.message(text=["–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ <item>", "–ø–µ—Ä–µ–≤–µ—Ä–Ω–∏ <item>"])
async def fliptext_handler(message: Message, info: UsersUserXtrCounters, item: Optional[str] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n"
                             f"–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        if item is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏ \"—Ç–µ–∫—Å—Ç\"")
        else:
            await message.answer(
                f"@id{message.from_id} ({info.first_name}), –¥–µ—Ä–∂–∏ \"{''.join(list(map(lambda x, y: x.replace(x, fliptext_dict.get(x)), ''.join(item.replace(' ', '').lower()), fliptext_dict)))}\"")


@bot.on.message(text=["–®–∞—Ä", "—à–∞—Ä"])
@bot.on.message(text=["–®–∞—Ä <item>", "—à–∞—Ä <item>"])
async def magicball_handler(message: Message, info: UsersUserXtrCounters, item: Optional[str] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: \
{UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        if item is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —à–∞—Ä \"—Ç–µ–∫—Å—Ç\"")
        else:
            ball_text = ('–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ', '–ø—Ä–µ–¥—Ä–µ—à–µ–Ω–æ', '–º–æ–π –æ—Ç–≤–µ—Ç - ¬´–Ω–µ—Ç¬ª', '—Ö–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã',
                         '–ø–æ–∫–∞ –Ω–µ —è—Å–Ω–æ', '—Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å', '–∑–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç - ¬´–î–∞¬ª', '–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞',
                         '–≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ', '–≤–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ', '—Å–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ', '–ø–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º - ¬´–ù–µ—Ç¬ª')
            await message.answer(
                f"@id{message.from_id} ({info.first_name}), {random.choice(ball_text)}")


@bot.on.message(text=["–ò–Ω—Ñ–∞", "–∏–Ω—Ñ–∞"])
@bot.on.message(text=["–ò–Ω—Ñ–∞ <item>", "–∏–Ω—Ñ–∞ <item>"])
async def infa_handler(message: Message, info: UsersUserXtrCounters, item: Optional[str] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        if item is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∏–Ω—Ñ–∞ \"—Ç–µ–∫—Å—Ç\"")
        else:
            infa_text = ('–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å -', '—à–∞–Ω—Å —ç—Ç–æ–≥–æ', '–º–Ω–µ –∫–∞–∂–µ—Ç—Å—è –æ–∫–æ–ª–æ')
            await message.answer(f"@id{message.from_id} ({info.first_name}), {random.choice(infa_text)} "
                                 f"{random.randint(0, 100)}%")


@bot.on.message(text=["–†–µ—à–∏", "—Ä–µ—à–∏"])
@bot.on.message(text=["–†–µ—à–∏ <equation>", "—Ä–µ—à–∏ <equation>"])
@bot.on.message(payload={"cmd": "cmd_equation"})
async def equation_handler(message: Message, info: UsersUserXtrCounters, equation: Optional[str] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        if equation is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ä–µ—à–∏ [—É—Ä–∞–≤–Ω–µ–Ω–∏–µ]")
        else:
            await message.answer(f"@id{message.from_id} ({info.first_name}), {eval(equation)}")


@bot.on.message(text=["–ö—É—Ä—Å", "–∫—É—Ä—Å"])
@bot.on.message(payload={"cmd": "cmd_course"})
async def course_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        bit = requests.get('https://api.cryptonator.com/api/ticker/btc-usd',
                           headers={'User-Agent': 'Mozilla/5.0 (Platform; Security; OS-or-CPU; Localization; rv:1.4) '
                                                  'Gecko/20030624 Netscape/7.1 (ax)'}).json()
        await message.answer(f'@id{message.from_id} ({info.first_name}), –∫—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n'
                             f'üí∏ –ë–∏—Ç–∫–æ–∏–Ω: {general.change_number(math.trunc(float(bit["ticker"]["price"])))}$')


@bot.on.message(text=["–ü—Ä–æ–¥–∞—Ç—å", "–ø—Ä–æ–¥–∞—Ç—å"])
@bot.on.message(text=["–ü—Ä–æ–¥–∞—Ç—å <property>", "–ø—Ä–æ–¥–∞—Ç—å <property>"])
@bot.on.message(text=["–ü—Ä–æ–¥–∞—Ç—å <property> <count:int>", "–ø—Ä–æ–¥–∞—Ç—å <property> <count:int>"])
async def sellproperty_handler(message: Message, info: UsersUserXtrCounters, property_name: Optional[str] = None,
                               count: Optional[int] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        user = UserAction.get_user(message.from_id)
        shop_data = MainData.get_shop_data()
        if property_name is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), —á—Ç–æ–±—ã —á—Ç–æ-—Ç–æ –ø—Ä–æ–¥–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: "
                                 f"–ø—Ä–æ–¥–∞—Ç—å [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]\n\n"
                                 f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
                                 f"‚†Äüöó –º–∞—à–∏–Ω–∞\n"
                                 f"‚†Äüõ• —è—Ö—Ç–∞\n"
                                 f"‚†Äüõ© —Å–∞–º–æ–ª–µ—Ç\n"
                                 f"‚†ÄüöÅ –≤–µ—Ä—Ç–æ–ª–µ—Ç\n"
                                 f"‚†Äüè† –¥–æ–º\n"
                                 f"‚†Äüåá –∫–≤–∞—Ä—Ç–∏—Ä–∞\n"
                                 f"‚†Äüì± —Ç–µ–ª–µ—Ñ–æ–Ω\n"
                                 f"‚†Äüëë —Ä–µ–π—Ç–∏–Ω–≥ [–∫–æ–ª-–≤–æ]‚†Ä‚†Ä{general.change_number(math.trunc(MainData.get_settings()[0]['Rating_Price']/2))}$/–µ–¥.\n"
                                 f"‚†Äüíº –±–∏–∑–Ω–µ—Å\n"
                                 f"‚†Äüåê –±–∏—Ç–∫–æ–∏–Ω [–∫–æ–ª-–≤–æ]‚†Ä‚†Ä{general.change_number(math.trunc(MainData.get_settings()[0]['BTC_USD_Curse']/2))}$/–µ–¥.\n"
                                 f"‚†Äüê∏ –ø–∏—Ç–æ–º–µ—Ü")
        elif property_name == '–º–∞—à–∏–Ω–∞':
            if user[1]["Car"] == 0:
                await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã! –î–ª—è –ø–æ–∫—É–ø–∫–∏ '
                                     f'–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω.')
            else:
                user[0]["Money"] += math.trunc(shop_data[0][user[1]["Car"] - 1]["CarPrice"]/2)
                user[1]["Car"] = 0
                UserAction.save_user(message.from_id, user)
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–æ–¥–∞–ª–∏ '
                                     f'{shop_data[0][user[1]["Car"]]["CarName"]} –∑–∞ '
                                     f'{general.change_number(math.trunc(shop_data[0][user[1]["Car"]]["CarPrice"]/2))}$')
        elif property_name == '—è—Ö—Ç–∞':
            if user[1]["Yacht"] == 0:
                await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —è—Ö—Ç—ã! –î–ª—è –ø–æ–∫—É–ø–∫–∏ '
                                     f'–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω.')
            else:
                user[0]["Money"] += math.trunc(shop_data[1][user[1]["Yacht"] - 1]["YachtPrice"]/2)
                user[1]["Yacht"] = 0
                UserAction.save_user(message.from_id, user)
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–æ–¥–∞–ª–∏ '
                                     f'{shop_data[1][user[1]["Yacht"]]["YachtName"]} –∑–∞ '
                                     f'{general.change_number(math.trunc(shop_data[1][user[1]["Yacht"]]["YachtPrice"]/2))}$')
        elif property_name == '—Å–∞–º–æ–ª–µ—Ç':
            if user[1]["Airplane"] == 0:
                await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å–∞–º–æ–ª–µ—Ç–∞! –î–ª—è –ø–æ–∫—É–ø–∫–∏ '
                                     f'–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω.')
            else:
                user[0]["Money"] += math.trunc(shop_data[2][user[1]["Airplane"] - 1]["AirplanePrice"]/2)
                user[1]["Airplane"] = 0
                UserAction.save_user(message.from_id, user)
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–æ–¥–∞–ª–∏ '
                                     f'{shop_data[2][user[1]["Airplane"]]["AirplaneName"]} –∑–∞ '
                                     f'{general.change_number(math.trunc(shop_data[2][user[1]["Airplane"]]["AirplanePrice"]/2))}$')
        elif property_name == '–≤–µ—Ä—Ç–æ–ª–µ—Ç':
            if user[1]["Helicopter"] == 0:
                await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞! –î–ª—è –ø–æ–∫—É–ø–∫–∏ '
                                     f'–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω.')
            else:
                user[0]["Money"] += math.trunc(shop_data[3][user[1]["Helicopter"] - 1]["HelicopterPrice"]/2)
                user[1]["Helicopter"] = 0
                UserAction.save_user(message.from_id, user)
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–æ–¥–∞–ª–∏ '
                                     f'{shop_data[3][user[1]["Helicopter"]]["HelicopterName"]} –∑–∞ '
                                     f'{general.change_number(math.trunc(shop_data[3][user[1]["Helicopter"]]["HelicopterPrice"]/2))}$')
        elif property_name == '–¥–æ–º':
            if user[1]["House"] == 0:
                await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç –¥–æ–º–∞! –î–ª—è –ø–æ–∫—É–ø–∫–∏ '
                                     f'–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω.')
            else:
                user[0]["Money"] += math.trunc(shop_data[4][user[1]["House"] - 1]["HousePrice"]/2)
                user[1]["House"] = 0
                UserAction.save_user(message.from_id, user)
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–æ–¥–∞–ª–∏ '
                                     f'{shop_data[4][user[1]["House"]]["HouseName"]} –∑–∞ '
                                     f'{general.change_number(math.trunc(shop_data[4][user[1]["House"]]["HousePrice"]/2))}$')
        elif property_name == '–∫–≤–∞—Ä—Ç–∏—Ä–∞':
            if user[1]["Apartment"] == 0:
                await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã! –î–ª—è –ø–æ–∫—É–ø–∫–∏ '
                                     f'–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω.')
            else:
                user[0]["Money"] += math.trunc(shop_data[5][user[1]["Apartment"] - 1]["ApartmentPrice"]/2)
                user[1]["Apartment"] = 0
                UserAction.save_user(message.from_id, user)
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–æ–¥–∞–ª–∏ '
                                     f'{shop_data[5][user[1]["Apartment"]]["ApartmentName"]} –∑–∞ '
                                     f'{general.change_number(math.trunc(shop_data[5][user[1]["Apartment"]]["ApartmentPrice"]/2))}$')
        elif property_name == '—Ç–µ–ª–µ—Ñ–æ–Ω':
            if user[1]["Phone"] == 0:
                await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –î–ª—è –ø–æ–∫—É–ø–∫–∏ '
                                     f'–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω.')
            else:
                user[0]["Money"] += math.trunc(shop_data[6][user[1]["Phone"] - 1]["PhonePrice"]/2)
                user[1]["Phone"] = 0
                UserAction.save_user(message.from_id, user)
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–æ–¥–∞–ª–∏ '
                                     f'{shop_data[6][user[1]["Phone"]]["PhoneName"]} –∑–∞ '
                                     f'{general.change_number(math.trunc(shop_data[6][user[1]["Phone"]]["PhonePrice"]/2))}$')
        elif property_name == '—Ä–µ–π—Ç–∏–Ω–≥':
            if count is None or count == 0:
                await message.answer(f'@id{message.from_id} ({info.first_name}), –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '
                                     f'–ø—Ä–æ–¥–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ [–∫–æ–ª-–≤–æ]')
            else:
                if user[0]["Rating"] < count:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Ä–µ–π—Ç–∏–Ω–≥–∞! –î–ª—è '
                                         f'–ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω.')
                else:
                    user[0]["Money"] += math.trunc(MainData.get_settings()[0]["Rating_Price"]/2)*count
                    user[0]["Rating"] -= count
                    UserAction.save_user(message.from_id, user)
                    await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–æ–¥–∞–ª–∏ '
                                         f'{general.change_number(count)} —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–∞ '
                                         f'{general.change_number(math.trunc(MainData.get_settings()[0]["Rating_Price"]/2)*count)}$')
        elif property_name == '–±–∏–∑–Ω–µ—Å':
            if user[1]["Business"] == 0:
                await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞! –î–ª—è –ø–æ–∫—É–ø–∫–∏ '
                                     f'–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω.')
            else:
                user[0]["Money"] += math.trunc(shop_data[8][user[1]["Business"] - 1]["BusinessPrice"]/2)
                user[1]["Business"] = 0
                UserAction.save_user(message.from_id, user)
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–æ–¥–∞–ª–∏ '
                                     f'{shop_data[8][user[1]["Business"]]["BusinessName"]} –∑–∞ '
                                     f'{general.change_number(math.trunc(shop_data[8][user[1]["Business"]]["BusinessPrice"]/2))}$')
        elif property_name == '–±–∏—Ç–∫–æ–∏–Ω':
            if count is None or count == 0:
                await message.answer(f'@id{message.from_id} ({info.first_name}), –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –±–∏—Ç–∫–æ–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '
                                     f'–ø—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∫–æ–∏–Ω [–∫–æ–ª-–≤–æ]')
            else:
                if user[0]["BTC"] < count:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –±–∏—Ç–∫–æ–∏–Ω–æ–≤! –î–ª—è '
                                         f'–ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–µ—Ä–º—ã')
                else:
                    user[0]["Money"] += math.trunc(MainData.get_settings()[0]["BTC_USD_Curse"]/2)*count
                    user[0]["BTC"] -= count
                    UserAction.save_user(message.from_id, user)
                    await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–æ–¥–∞–ª–∏ '
                                         f'{general.change_number(count)} –±–∏—Ç–∫–æ–∏–Ω–∞(-–æ–≤) –∑–∞ '
                                         f'{general.change_number(math.trunc(MainData.get_settings()[0]["BTC_USD_Curse"]/2)*count)}$')
        elif property_name == '–ø–∏—Ç–æ–º–µ—Ü':
            if user[1]["Pet"] == 0:
                await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –î–ª—è –ø–æ–∫—É–ø–∫–∏ '
                                     f'–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω.')
            else:
                user[0]["Money"] += math.trunc(shop_data[9][user[1]["Pet"] - 1]["PetPrice"]/2)
                user[1]["Pet"] = 0
                UserAction.save_user(message.from_id, user)
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –ø—Ä–æ–¥–∞–ª–∏ '
                                     f'{shop_data[9][user[1]["Pet"]]["PetName"]} –∑–∞ '
                                     f'{general.change_number(math.trunc(shop_data[9][user[1]["Pet"]]["PetPrice"]/2))}$')
        else:
            await message.answer(f'@id{message.from_id} ({info.first_name}), –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!')


@bot.on.message(text=["–ò–≥—Ä—ã", "–∏–≥—Ä—ã"])
@bot.on.message(payload={"cmd": "cmd_games"})
async def games_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        await message.answer(f"@id{message.from_id} ({info.first_name}), –º–æ–∏ –∏–≥—Ä—ã: \n"
                             f"üî´ –†—É–ª–µ—Ç–∫–∞ - —Ä—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞\n"
                             f"üé≤ –ö—É–±–∏–∫ [1-6]\n"
                             f"üé∞ –ö–∞–∑–∏–Ω–æ [—Å—É–º–º–∞]\n"
                             f"üìà –¢—Ä–µ–π–¥ [–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑] [—Å—É–º–º–∞]\n"
                             f"ü•õ –°—Ç–∞–∫–∞–Ω—á–∏–∫ [1-3] [—Å—É–º–º–∞]\n"
                             f"ü¶Ö –ú–æ–Ω–µ—Ç–∫–∞ [–æ—Ä—ë–ª/—Ä–µ—à–∫–∞] [—Å—É–º–º–∞]", keyboard=GAMES_KEYBOARD)


# Game roulette
@bot.on.message(text=["–†—É–ª–µ—Ç–∫–∞", "—Ä—É–ª–µ—Ç–∫–∞"])
@bot.on.message(payload={"cmd": "game_roulette"})
async def game_roulette_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        user = UserAction.get_user(message.from_id)
        user[0]["Roulette_Shots"] = 1
        UserAction.save_user(message.from_id, user)
        await message.answer(f"@id{message.from_id} ({info.first_name}), –í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É –≤ \"–†—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É\" üëç\n"
                             f"üî´ –î–ª—è –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ \"–≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å\"\n"
                             f"‚ùå –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã, –Ω–∞–ø–∏—à–µ—Ç \"–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è\"", keyboard=GAME_ROULETTE_KEYBOARD)


@bot.on.message(text=["–í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å", "–≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å"])
@bot.on.message(payload={"cmd": "game_roulette_shot"})
async def game_roulette_shot_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        user = UserAction.get_user(message.from_id)
        shot = random.randint(1, 6)
        if user[0]["Roulette_Shots"] <= 0:
            user[0]["Roulette_Shots"] = 1
            UserAction.save_user(message.from_id, user)
            await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É –≤ \"–†—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É\" üëç\n'
                                 f'üî´ –î–ª—è –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ \"–≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å\"\n'
                                 f'‚ùå –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã, –Ω–∞–ø–∏—à–µ—Ç \"–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è\"', keyboard=GAME_ROULETTE_KEYBOARD)
        else:
            if shot == 1 and user[0]["Roulette_Shots"] > 0:
                if user[0]["Money"] >= 800:
                    heal_money = random.randint(1, 8) * 100
                    await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –Ω–∞ '
                                         f'{user[0]["Roulette_Shots"]}-–π –ø–æ–ø—ã—Ç–∫–µ ‚òπ\n'
                                         f'üí∏ –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {general.change_number(user[0]["Roulette_Shots"] * 100)}$\n'
                                         f'‚ù§ –ù–∞ –ª–µ—á–µ–Ω–∏–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {general.change_number(heal_money)}$',
                                         keyboard=GAME_ROULETTE_KEYBOARD)
                    user[0]["Money"] -= heal_money
                    user[0]["Money"] += user[0]["Roulette_Shots"] * 100
                    user[0]["Roulette_Shots"] = 0
                    UserAction.save_user(message.from_id, user)
                else:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –Ω–∞ '
                                         f'{user[0]["Roulette_Shots"]}-–π –ø–æ–ø—ã—Ç–∫–µ ‚òπ\n'
                                         f'üí∏ –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {general.change_number(user[0]["Roulette_Shots"] * 100)}$',
                                         keyboard=GAME_ROULETTE_KEYBOARD)
                    user[0]["Money"] += user[0]["Roulette_Shots"] * 100
                    user[0]["Roulette_Shots"] = 0
                    UserAction.save_user(message.from_id, user)
            else:
                user[0]["Roulette_Shots"] += 1
                UserAction.save_user(message.from_id, user)
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã —Å–¥–µ–ª–∞–ª–∏ '
                                     f'{user[0]["Roulette_Shots"] - 1}-—é –æ—Å–µ—á–∫—É', keyboard=GAME_ROULETTE_KEYBOARD)


@bot.on.message(text=["–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è"])
@bot.on.message(payload={"cmd": "game_roulette_stop"})
async def game_roulette_shot_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        user = UserAction.get_user(message.from_id)
        if user[0]["Roulette_Shots"] - 1 <= 0:
            await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤ \"–†—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É\"\n'
                                 f'üî´ –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ \"—Ä—É–ª–µ—Ç–∫–∞\"\n', keyboard=GAMES_KEYBOARD)
        else:
            if user[0]["Roulette_Shots"] - 1 > 0:
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—å –Ω–∞ '
                                     f'{user[0]["Roulette_Shots"]}-–π –ø–æ–ø—ã—Ç–∫–µ üëç\n'
                                     f'üí∏ –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {general.change_number(user[0]["Roulette_Shots"] * 100)}$',
                                     keyboard=GAMES_KEYBOARD)
                user[0]["Money"] += user[0]["Roulette_Shots"] * 100
                user[0]["Roulette_Shots"] = 0
                UserAction.save_user(message.from_id, user)


# Game cube
@bot.on.message(text=["–ö—É–±–∏–∫", "–∫—É–±–∏–∫"])
@bot.on.message(payload={"cmd": "game_cube"})
async def game_cube_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        await message.answer(f"@id{message.from_id} ({info.first_name}), –í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É –≤ \"–ö—É–±–∏–∫\" üëç\n"
                             f"üé≤ –î–ª—è –∏–≥—Ä—ã –≤ –∫—É–±–∏–∫ –≤—ã–±–∏—Ä–∞–π—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 6\n", keyboard=GAME_CUBE_KEYBOARD)


@bot.on.message(payload={"cmd": "game_cube_1"})
@bot.on.message(payload={"cmd": "game_cube_2"})
@bot.on.message(payload={"cmd": "game_cube_3"})
@bot.on.message(payload={"cmd": "game_cube_4"})
@bot.on.message(payload={"cmd": "game_cube_5"})
@bot.on.message(payload={"cmd": "game_cube_6"})
async def game_cube_number_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        user = UserAction.get_user(message.from_id)
        temp_number = message.payload.split('{"cmd":"game_cube_')[1].split('"}')[0]
        cube_temp = random.randint(1, 6)
        cube_prize = random.randint(2, 50) * 50
        if cube_temp == int(temp_number):
            await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã —É–≥–∞–¥–∞–ª–∏ üéâ\n'
                                 f'üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {cube_temp}\n'
                                 f'üí∏ –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {general.change_number(cube_prize)}$', keyboard=GAME_CUBE_KEYBOARD)
            user[0]["Money"] += cube_prize
            UserAction.save_user(message.from_id, user)
        else:
            await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ üòü\n'
                                 f'üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {cube_temp}', keyboard=GAME_CUBE_KEYBOARD)


# Game coin
@bot.on.message(text=["–ú–æ–Ω–µ—Ç–∫–∞", "–º–æ–Ω–µ—Ç–∫–∞"])
@bot.on.message(payload={"cmd": "game_coin"})
async def game_cube_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        await message.answer(f"@id{message.from_id} ({info.first_name}), –í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É –≤ \"–ú–æ–Ω–µ—Ç–∫–∞\" üëç\n"
                             f"ü¶Ö –î–ª—è –∏–≥—Ä—ã –≤ –∫—É–±–∏–∫ –≤—ã–±–∏—Ä–∞–π—Ç–µ \"–û—Ä–µ–ª\" –∏–ª–∏ \"–†–µ—à–∫–∞\"\n", keyboard=GAME_COIN_KEYBOARD)


@bot.on.message(payload={"cmd": "game_coin_1"})
@bot.on.message(payload={"cmd": "game_coin_2"})
async def game_cube_number_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        user = UserAction.get_user(message.from_id)
        temp_number = message.payload.split('{"cmd":"game_coin_')[1].split('"}')[0]
        coin_temp = random.randint(1, 2)
        coin_prize = random.randint(2, 25) * 50
        if coin_temp == int(temp_number):
            await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã —É–≥–∞–¥–∞–ª–∏ üéâ\n'
                                 f'ü¶Ö –í—ã–ø–∞–ª–æ: {"–æ—Ä–µ–ª" if coin_temp == 1 else "—Ä–µ—à–∫–∞"}\n'
                                 f'üí∏ –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {general.change_number(coin_prize)}$', keyboard=GAME_COIN_KEYBOARD)
            user[0]["Money"] += coin_prize
            UserAction.save_user(message.from_id, user)
        else:
            await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ üòü\n'
                                 f'ü¶Ö –í—ã–ø–∞–ª–æ: {"–æ—Ä–µ–ª" if coin_temp == 1 else "—Ä–µ—à–∫–∞"}', keyboard=GAME_COIN_KEYBOARD)


# Game cup
@bot.on.message(text=["–°—Ç–∞–∫–∞–Ω—á–∏–∫ <cupnumber:int> <money:int>", "—Å—Ç–∞–∫–∞–Ω—á–∏–∫ <cupnumber:int> <money:int>"])
@bot.on.message(payload={"cmd": "game_cup"})
async def game_cup_handler(message: Message, info: UsersUserXtrCounters, cupnumber: Optional[int] = None,
                           money: Optional[int] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        if cupnumber is None or money is None or cupnumber > 3:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –¥–ª—è –∏–≥—Ä—ã –≤ \"–°—Ç–∞–∫–∞–Ω—á–∏–∫\"\n"
                                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—Ç–∞–∫–∞–Ω—á–∏–∫ [1-3] [—Å—Ç–∞–≤–∫–∞]")
        else:
            user = UserAction.get_user(message.from_id)
            cup_temp = random.randint(1, 3)
            if cup_temp == cupnumber:
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã —É–≥–∞–¥–∞–ª–∏ üéâ\n'
                                     f'üí∏ –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {general.change_number(math.trunc(money / 2))}$')
                user[0]["Money"] += math.trunc(money / 2)
                UserAction.save_user(message.from_id, user)
            else:
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ üòü\n'
                                     f'ü•õ —ç—Ç–æ –±—ã–ª {cup_temp}-–π —Å—Ç–∞–∫–∞–Ω—á–∏–∫')
                user[0]["Money"] -= money
                UserAction.save_user(message.from_id, user)


# Game trade
@bot.on.message(text=["–¢—Ä–µ–π–¥ <change> <money:int>", "—Ç—Ä–µ–π–¥ <change> <money:int>"])
@bot.on.message(payload={"cmd": "game_trade"})
async def game_trade_handler(message: Message, info: UsersUserXtrCounters, change: Optional[str] = None,
                             money: Optional[int] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        if change is None or money is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –¥–ª—è –∏–≥—Ä—ã –≤ \"–¢—Ä–µ–π–¥\"\n"
                                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ç—Ä–µ–π–¥ [–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑] [—Å—Ç–∞–≤–∫–∞]")
        else:
            user = UserAction.get_user(message.from_id)
            trade_temp = random.randint(1, 5)
            trade_course = random.randint(1, 1000)
            if change == '–≤–≤–µ—Ä—Ö':
                if trade_temp == 1:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), –∫—É—Ä—Å –ø–æ–¥–æ—Ä–æ–∂–∞–ª ‚§¥ –Ω–∞ '
                                         f'{general.change_number(trade_course)}$\n'
                                         f'üí∏ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {general.change_number(money)}$ üòé')
                    user[0]["Money"] += money
                    UserAction.save_user(message.from_id, user)
                else:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), –∫—É—Ä—Å –ø–æ–¥–µ—à–µ–≤–µ–ª ‚§µ –Ω–∞ '
                                         f'{general.change_number(trade_course)}$\n'
                                         f'üí∏ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏: {general.change_number(money)}$ üòî')
                    user[0]["Money"] -= money
                    UserAction.save_user(message.from_id, user)
            elif change == '–≤–Ω–∏–∑':
                if trade_temp == 1:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), –∫—É—Ä—Å –ø–æ–¥–µ—à–µ–≤–µ–ª ‚§µ –Ω–∞ '
                                         f'{general.change_number(trade_course)}$\n'
                                         f'üí∏ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {general.change_number(money)}$ üòé')
                    user[0]["Money"] += money
                    UserAction.save_user(message.from_id, user)
                else:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), –∫—É—Ä—Å –ø–æ–¥–æ—Ä–æ–∂–∞–ª ‚§¥ –Ω–∞ '
                                         f'{general.change_number(trade_course)}$\n'
                                         f'üí∏ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏: {general.change_number(money)}$ üòî')
                    user[0]["Money"] -= money
                    UserAction.save_user(message.from_id, user)
            else:
                await message.answer(f"@id{message.from_id} ({info.first_name}), –¥–ª—è –∏–≥—Ä—ã –≤ \"–¢—Ä–µ–π–¥\"\n"
                                     f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ç—Ä–µ–π–¥ [–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑] [—Å—Ç–∞–≤–∫–∞]")


# Game trade
@bot.on.message(text=["–ö–∞–∑–∏–Ω–æ <money:int>", "–∫–∞–∑–∏–Ω–æ <money:int>"])
@bot.on.message(payload={"cmd": "game_casino"})
async def game_casino_handler(message: Message, info: UsersUserXtrCounters, money: Optional[int] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        if money is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –¥–ª—è –∏–≥—Ä—ã –≤ \"–ö–∞–∑–∏–Ω–æ\"\n"
                                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫–∞–∑–∏–Ω–æ [—Å—Ç–∞–≤–∫–∞]")
        else:
            user = UserAction.get_user(message.from_id)
            casino_temp = random.choice([0, 0.5, 2, 5, 10])
            if casino_temp == 0:
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í–∞–º –≤—ã–ø–∞–ª –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {casino_temp}\n'
                                     f'üí∏ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {general.change_number(money * casino_temp)}$')
                user[0]["Money"] += money * casino_temp
                UserAction.save_user(message.from_id, user)
            elif casino_temp == 0.5:
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í–∞–º –≤—ã–ø–∞–ª –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {casino_temp}\n'
                                     f'üí∏ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {general.change_number(math.trunc(money * casino_temp))}$')
                user[0]["Money"] += money * casino_temp
                UserAction.save_user(message.from_id, user)
            elif casino_temp == 2:
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í–∞–º –≤—ã–ø–∞–ª –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {casino_temp}\n'
                                     f'üí∏ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {general.change_number(money * casino_temp)}$')
                user[0]["Money"] += money * casino_temp
                UserAction.save_user(message.from_id, user)
            elif casino_temp == 5:
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í–∞–º –≤—ã–ø–∞–ª –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {casino_temp}\n'
                                     f'üí∏ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {general.change_number(money * casino_temp)}$')
                user[0]["Money"] += money * casino_temp
                UserAction.save_user(message.from_id, user)
            elif casino_temp == 10:
                await message.answer(f'@id{message.from_id} ({info.first_name}), –í–∞–º –≤—ã–ø–∞–ª –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {casino_temp}\n'
                                     f'üí∏ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {general.change_number(money * casino_temp)}$')
                user[0]["Money"] += money * casino_temp
                UserAction.save_user(message.from_id, user)
            else:
                await message.answer(f"@id{message.from_id} ({info.first_name}), –¥–ª—è –∏–≥—Ä—ã –≤ \"–ö–∞–∑–∏–Ω–æ\"\n"
                                     f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫–∞–∑–∏–Ω–æ [—Å—Ç–∞–≤–∫–∞]")


# Menu commands
@bot.on.message(text=["–†–∞–∑–Ω–æ–µ", "—Ä–∞–∑–Ω–æ–µ"])
@bot.on.message(payload={"cmd": "cmd_other"})
async def other_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        await message.answer(f"@id{message.from_id} ({info.first_name}), —Ä–∞–∑–¥–µ–ª \"–†–∞–∑–Ω–æ–µ\" üí°", keyboard=OTHER_KEYBOARD)


@bot.on.message(payload={"cmd": "cmd_mainmenu"})
async def other_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id, info.first_name)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: "
                             f"{info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {UserAction.get_user(message.from_id)[0]['ID']}")
    else:
        await message.answer(f"@id{message.from_id} ({info.first_name}), —Ä–∞–∑–¥–µ–ª \"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\" üí°",
                             keyboard=MAIN_KEYBOARD)


# Admin commands
@bot.on.message(text=["–ê–¥–º–∏–Ω–ø–æ–º–æ—â—å", "–∞–¥–º–∏–Ω–ø–æ–º–æ—â—å", "ahelp"])
@bot.on.message(payload={"cmd": "cmd_ahelp"})
async def ahelp_handler(message: Message, info: UsersUserXtrCounters):
    user = UserAction.get_user(message.from_id)
    if user[0]["RankLevel"] < 4:
        return True
    elif user[0]["RankLevel"] == 4:
        await message.answer(f"@id{message.from_id} ({info.first_name}), –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n"
                             f"‚†Ä1. –æ—Ç–≤ [ID —Ä–µ–ø–æ—Ä—Ç–∞] [–æ—Ç–≤–µ—Ç] - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∂–∞–ª–æ–±—É\n"
                             f"‚†Ä2. setnick [ID] [–Ω–∏–∫] - –∏–∑–º–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–∫—É –Ω–∏–∫\n"
                             f"‚†Ä3. –ª–Ω–∏–∫ [ID] - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–≥—Ä–æ–∫—É –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫\n"
                             f"‚†Ä4. log [ID] - —Å–∫–∞—á–∞—Ç—å –ª–æ–≥ –∏–≥—Ä–æ–∫–∞\n"
                             f"‚†Ä5. getbaninfo [ID] - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ –∏–≥—Ä–æ–∫–∞\n"
                             f"‚†Ä6. get [ID] - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ\n"
                             f"‚†Ä7. –±–∞–Ω—Ä–µ–ø [ID] - –∑–∞–ø—Ä–µ—Ç–∏—Ç—å/—Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–≥—Ä–æ–∫—É –ø–∏—Å–∞—Ç—å –≤ —Ä–µ–ø–æ—Ä—Ç\n"
                             f"‚†Ä8. —Ç–±–∞–Ω [ID] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫—É —Ç–æ–ø\n"
                             f"‚†Ä9. –ø–±–∞–Ω [ID] - –∑–∞–ø—Ä–µ—Ç–∏—Ç—å/—Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–≥—Ä–æ–∫—É –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏\n"
                             f"‚†Ä10. —Ä–∞–∑–±–∞–Ω [ID] - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞\n"
                             f"‚†Ä11. –±–∞–Ω [ID] [–≤—Ä–µ–º—è]—Å/–º/—á/–¥ [–ø—Ä–∏—á–∏–Ω–∞] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞\n"
                             f"‚†Ä12. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
                             f"‚†Ä13. getid [—Å—Å—ã–ª–∫–∞] - —É–∑–Ω–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π ID –∏–≥—Ä–æ–∫–∞")
    elif user[0]["RankLevel"] == 5:
        await message.answer(f"@id{message.from_id} ({info.first_name}), –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n"
                             f"‚†Ä1. –æ—Ç–≤ [ID —Ä–µ–ø–æ—Ä—Ç–∞] [–æ—Ç–≤–µ—Ç] - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∂–∞–ª–æ–±—É\n"
                             f"‚†Ä2. setnick [ID] [–Ω–∏–∫] - –∏–∑–º–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–∫—É –Ω–∏–∫\n"
                             f"‚†Ä3. –ª–Ω–∏–∫ [ID] - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–≥—Ä–æ–∫—É –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫\n"
                             f"‚†Ä4. log [ID] - —Å–∫–∞—á–∞—Ç—å –ª–æ–≥ –∏–≥—Ä–æ–∫–∞\n"
                             f"‚†Ä5. getbaninfo [ID] - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ –∏–≥—Ä–æ–∫–∞\n"
                             f"‚†Ä6. get [ID] - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ\n"
                             f"‚†Ä7. –±–∞–Ω—Ä–µ–ø [ID] - –∑–∞–ø—Ä–µ—Ç–∏—Ç—å/—Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–≥—Ä–æ–∫—É –ø–∏—Å–∞—Ç—å –≤ —Ä–µ–ø–æ—Ä—Ç\n"
                             f"‚†Ä8. —Ç–±–∞–Ω [ID] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫—É —Ç–æ–ø\n"
                             f"‚†Ä9. –ø–±–∞–Ω [ID] - –∑–∞–ø—Ä–µ—Ç–∏—Ç—å/—Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–≥—Ä–æ–∫—É –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏\n"
                             f"‚†Ä10. —Ä–∞–∑–±–∞–Ω [ID] - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞\n"
                             f"‚†Ä11. –±–∞–Ω [ID] [–≤—Ä–µ–º—è]—Å/–º/—á/–¥ [–ø—Ä–∏—á–∏–Ω–∞] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞\n"
                             f"‚†Ä12. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
                             f"‚†Ä13. getid [—Å—Å—ã–ª–∫–∞] - —É–∑–Ω–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π ID –∏–≥—Ä–æ–∫–∞\n"
                             f"‚†Ä\n–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                             f"‚†Ä1. –≤—ã–¥–∞—Ç—å [ID] –¥–µ–Ω—å–≥–∏/—Ä–µ–π—Ç–∏–Ω–≥/–±–∏—Ç–∫–æ–∏–Ω—ã/–æ–ø—ã—Ç [–∫–æ–ª-–≤–æ]\n"
                             f"‚†Ä2. –∏–∑–º–∏–º—É—â–µ—Å—Ç–≤–æ [ID] "
                             f"–±–∏–∑–Ω–µ—Å/–ø–∏—Ç–æ–º–µ—Ü/—Ç–µ–ª–µ—Ñ–æ–Ω/–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–≤–µ—Ä—Ç–æ–ª—ë—Ç/—Å–∞–º–æ–ª—ë—Ç/–º–∞—à–∏–Ω–∞/—Ñ–µ—Ä–º–∞/—è—Ö—Ç–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n "
                             f"‚†Ä3. replace [ID] –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è [–∑–Ω–∞—á–µ–Ω–∏–µ]\n"
                             f"‚†Ä–û—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è replace:\n"
                             f"‚†Ä- balance - –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ä—É–∫–∞—Ö\n"
                             f"‚†Ä- bank - –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫–µ\n"
                             f"‚†Ä- rating - —Ä–µ–π—Ç–∏–Ω–≥\n"
                             f"‚†Ä- farms - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–µ—Ä–º")
    elif user[0]["RankLevel"] > 5:
        await message.answer(f"@id{message.from_id} ({info.first_name}), –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n"
                             f"‚†Ä1. –æ—Ç–≤ [ID —Ä–µ–ø–æ—Ä—Ç–∞] [–æ—Ç–≤–µ—Ç] - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∂–∞–ª–æ–±—É\n"
                             f"‚†Ä2. setnick [ID] [–Ω–∏–∫] - –∏–∑–º–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–∫—É –Ω–∏–∫\n"
                             f"‚†Ä3. –ª–Ω–∏–∫ [ID] - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–≥—Ä–æ–∫—É –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫\n"
                             f"‚†Ä4. log [ID] - —Å–∫–∞—á–∞—Ç—å –ª–æ–≥ –∏–≥—Ä–æ–∫–∞\n"
                             f"‚†Ä5. getbaninfo [ID] - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ –∏–≥—Ä–æ–∫–∞\n"
                             f"‚†Ä6. get [ID] - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ\n"
                             f"‚†Ä7. –±–∞–Ω—Ä–µ–ø [ID] - –∑–∞–ø—Ä–µ—Ç–∏—Ç—å/—Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–≥—Ä–æ–∫—É –ø–∏—Å–∞—Ç—å –≤ —Ä–µ–ø–æ—Ä—Ç\n"
                             f"‚†Ä8. —Ç–±–∞–Ω [ID] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫—É —Ç–æ–ø\n"
                             f"‚†Ä9. –ø–±–∞–Ω [ID] - –∑–∞–ø—Ä–µ—Ç–∏—Ç—å/—Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–≥—Ä–æ–∫—É –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏\n"
                             f"‚†Ä10. —Ä–∞–∑–±–∞–Ω [ID] - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞\n"
                             f"‚†Ä11. –±–∞–Ω [ID] [–≤—Ä–µ–º—è]—Å/–º/—á/–¥ [–ø—Ä–∏—á–∏–Ω–∞] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞\n"
                             f"‚†Ä12. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
                             f"‚†Ä13. getid [—Å—Å—ã–ª–∫–∞] - —É–∑–Ω–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π ID –∏–≥—Ä–æ–∫–∞\n"
                             f"\n–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                             f"‚†Ä1. –≤—ã–¥–∞—Ç—å [ID] –¥–µ–Ω—å–≥–∏/—Ä–µ–π—Ç–∏–Ω–≥/–±–∏—Ç–∫–æ–∏–Ω—ã/–æ–ø—ã—Ç [–∫–æ–ª-–≤–æ]\n"
                             f"‚†Ä2. –∏–∑–º–∏–º—É—â–µ—Å—Ç–≤–æ [ID] "
                             f"–±–∏–∑–Ω–µ—Å/–ø–∏—Ç–æ–º–µ—Ü/—Ç–µ–ª–µ—Ñ–æ–Ω/–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–≤–µ—Ä—Ç–æ–ª—ë—Ç/—Å–∞–º–æ–ª—ë—Ç/–º–∞—à–∏–Ω–∞/—Ñ–µ—Ä–º–∞/—è—Ö—Ç–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n "
                             f"‚†Ä3. replace [ID] –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è [–∑–Ω–∞—á–µ–Ω–∏–µ]\n"
                             f"‚†Ä4. @sendtext [—Å–æ–æ–±—â–µ–Ω–∏–µ] - —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                             f"‚†Ä5. @sendwall [ID –ø–æ—Å—Ç–∞] - —Ä—ã—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–∞\n"
                             f"\n–ö–æ–º–∞–Ω–¥—ã –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è:\n"
                             f"‚†Ä1. add_property [—Ç–∏–ø] - –¥–æ–±–∞–≤–∏—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ –≤ –±–æ—Ç–∞\n"
                             f"‚†Ä2. –∏–∑–º—Ä–∞–Ω–≥ [ID] [–∑–Ω–∞—á–µ–Ω–∏–µ] - –∏–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞\n"
                             f"\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è add_property:\n"
                             f"‚†Ä–º–∞—à–∏–Ω–∞ - [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]\n"
                             f"‚†Ä—è—Ö—Ç–∞ - [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]\n"
                             f"‚†Ä—Å–∞–º–æ–ª–µ—Ç - [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]\n"
                             f"‚†Ä–≤–µ—Ä—Ç–æ–ª–µ—Ç - [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]\n"
                             f"‚†Ä–¥–æ–º - [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]\n"
                             f"‚†Ä–∫–≤–∞—Ä—Ç–∏—Ä–∞ - [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]\n"
                             f"‚†Ä–±–∏–∑–Ω–µ—Å - [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞] [–∫–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö]\n"
                             f"‚†Ä–ø–∏—Ç–æ–º–µ—Ü - [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞] [–º–∏–Ω –∫–æ–ª-–≤–æ –¥–æ–±—ã—á–∏] [–º–∞–∫—Å –∫–æ–ª-–≤–æ –¥–æ–±—ã—á–∏] [–∏–∫–æ–Ω–∫–∞]\n"
                             f"‚†Ä—Ñ–µ—Ä–º–∞ - [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞] [–∫–æ–ª-–≤–æ –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –≤ —á–∞—Å]\n"
                             f"‚†Ä—Ç–µ–ª–µ—Ñ–æ–Ω - [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]\n"
                             f"\n–û—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è replace:\n"
                             f"‚†Ä- balance - –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ä—É–∫–∞—Ö\n"
                             f"‚†Ä- bank - –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫–µ\n"
                             f"‚†Ä- rating - —Ä–µ–π—Ç–∏–Ω–≥\n"
                             f"‚†Ä- farms - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–µ—Ä–º\n"
                             f"\n–°—Ç–∞—Ç—É—Å—ã:\n"
                             f"‚†Ä1 - –æ–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫\n"
                             f"‚†Ä2 - VIP\n"
                             f"‚†Ä3 - Premium\n"
                             f"‚†Ä4 - –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä\n"
                             f"‚†Ä5 - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")


@bot.on.message(text=["add_property"])
@bot.on.message(text=["add_property <property_type>"])
@bot.on.message(text=["add_property <property_type> \"<name>\""])
@bot.on.message(text=["add_property <property_type> \"<name>\" <price:int>"])
@bot.on.message(text=["add_property <property_type> \"<name>\" <price:int> <param1:int>"])
@bot.on.message(text=["add_property <property_type> \"<name>\" <price:int> <param1:int> <param2:int> <param3>"])
@bot.on.message(payload={"cmd": "cmd_add_property"})
async def add_property_handler(message: Message, info: UsersUserXtrCounters, property_type: Optional[str] = None,
                               name: Optional[str] = None, price: Optional[int] = None, param1: Optional[int] = None,
                               param2: Optional[int] = None, param3: Optional[str] = None):
    user = UserAction.get_user(message.from_id)
    if user[0]["RankLevel"] < 6:
        return True
    elif property_type is None:
        await message.answer(f"@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'add_property [—Ç–∏–ø]'")
    # elif not general.isint(price):
    #     await message.answer(f"@id{message.from_id} ({info.first_name}), –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞!")
    elif property_type == "–º–∞—à–∏–Ω–∞":
        if name is None or price is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'add_property –º–∞—à–∏–Ω–∞ ["
                                 f"–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]'")
        else:
            MainData.add_static_property("cars", CarName=name, CarPrice=price)
            await message.answer(f"@id{message.from_id} ({info.first_name}), –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å "
                                 f"{name} —Å —Ü–µ–Ω–æ–π {general.change_number(price)}$")
    elif property_type == "—è—Ö—Ç–∞":
        if name is None or price is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'add_property —è—Ö—Ç–∞ ["
                                 f"–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]'")
        else:
            MainData.add_static_property("yachts", YachtName=name, YachtPrice=price)
            await message.answer(f"@id{message.from_id} ({info.first_name}), –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é —è—Ö—Ç—É "
                                 f"{name} —Å —Ü–µ–Ω–æ–π {general.change_number(price)}$")
    elif property_type == "—Å–∞–º–æ–ª–µ—Ç":
        if name is None or price is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'add_property —Å–∞–º–æ–ª–µ—Ç ["
                                 f"–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]'")
        else:
            MainData.add_static_property("airplanes", AirplaneName=name, AirplanePrice=price)
            await message.answer(f"@id{message.from_id} ({info.first_name}), –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Å–∞–º–æ–ª–µ—Ç "
                                 f"{name} —Å —Ü–µ–Ω–æ–π {general.change_number(price)}$")
    elif property_type == "–≤–µ—Ä—Ç–æ–ª–µ—Ç":
        if name is None or price is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'add_property –≤–µ—Ä—Ç–æ–ª–µ—Ç ["
                                 f"–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]'")
        else:
            MainData.add_static_property("helicopters", HelicopterName=name, HelicopterPrice=price)
            await message.answer(f"@id{message.from_id} ({info.first_name}), –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –≤–µ—Ä—Ç–æ–ª–µ—Ç "
                                 f"{name} —Å —Ü–µ–Ω–æ–π {general.change_number(price)}$")
    elif property_type == "–¥–æ–º":
        if name is None or price is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'add_property –¥–æ–º ["
                                 f"–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]'")
        else:
            MainData.add_static_property("houses", HouseName=name, HousePrice=price)
            await message.answer(f"@id{message.from_id} ({info.first_name}), –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –¥–æ–º "
                                 f"{name} —Å —Ü–µ–Ω–æ–π {general.change_number(price)}$")
    elif property_type == "–∫–≤–∞—Ä—Ç–∏—Ä–∞":
        if name is None or price is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'add_property –∫–≤–∞—Ä—Ç–∏—Ä–∞ ["
                                 f"–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]'")
        else:
            MainData.add_static_property("apartments", ApartmentName=name, ApartmentPrice=price)
            await message.answer(f"@id{message.from_id} ({info.first_name}), –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É "
                                 f"{name} —Å —Ü–µ–Ω–æ–π {general.change_number(price)}$")
    elif property_type == "–±–∏–∑–Ω–µ—Å":
        if name is None or price is None or param1 is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'add_property –±–∏–∑–Ω–µ—Å ["
                                 f"–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞] [–∫–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö]'")
        else:
            MainData.add_business(BusinessName=name, BusinessPrice=price, BusinessWorkers=param1)
            await message.answer(f"@id{message.from_id} ({info.first_name}), –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –±–∏–∑–Ω–µ—Å "
                                 f"{name} —Å —Ü–µ–Ω–æ–π {general.change_number(price)}$ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞–±–æ—á–∏—Ö "
                                 f"{param1}")
    elif property_type == "–ø–∏—Ç–æ–º–µ—Ü":
        if name is None or price is None or param1 is None or param2 is None or param3 is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'add_property –ø–∏—Ç–æ–º–µ—Ü ["
                                 f"–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞] [–º–∏–Ω –∫–æ–ª-–≤–æ –¥–æ–±—ã—á–∏] [–º–∞–∫—Å –∫–æ–ª-–≤–æ –¥–æ–±—ã—á–∏] [–∏–∫–æ–Ω–∫–∞]'")
        else:
            MainData.add_pet(PetName=name, PetPrice=price, PetMinMoney=param1, PetMaxMoney=param2, PetIcon=param3)
            await message.answer(f"@id{message.from_id} ({info.first_name}), –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ "
                                 f"{name} —Å —Ü–µ–Ω–æ–π {general.change_number(price)}$, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–æ–±—ã—á–µ–π {param1}, "
                                 f"–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ–±—ã—á–µ–π {param2}"
                                 f" –∏ –∏–∫–æ–Ω–∫–æ–π {param3}")
    elif property_type == "—Ñ–µ—Ä–º–∞":
        if name is None or price is None or param1 is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'add_property —Ñ–µ—Ä–º–∞ ["
                                 f"–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞] [–∫–æ–ª-–≤–æ –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –≤ —á–∞—Å]'")
        else:
            MainData.add_farm(FarmName=name, FarmPrice=price, FarmBTCPerHour=param1)
            await message.answer(f"@id{message.from_id} ({info.first_name}), –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é —Ñ–µ—Ä–º—É "
                                 f"{name} —Å —Ü–µ–Ω–æ–π {general.change_number(price)}$ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –≤ —á–∞—Å "
                                 f"{param1}")
    elif property_type == "—Ç–µ–ª–µ—Ñ–æ–Ω":
        if name is None or price is None:
            await message.answer(f"@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'add_property —Ç–µ–ª–µ—Ñ–æ–Ω ["
                                 f"–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ü–µ–Ω–∞]'")
        else:
            MainData.add_static_property("phones", PhoneName=name, PhonePrice=price)
            await message.answer(f"@id{message.from_id} ({info.first_name}), –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω "
                                 f"{name} —Å —Ü–µ–Ω–æ–π {general.change_number(price)}$")
    else:
        await message.answer(f"@id{message.from_id} ({info.first_name}), –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")


# noinspection PyTypeChecker
@bot.on.raw_event(GroupEventType.GROUP_JOIN, dataclass=GroupTypes.GroupJoin)
async def group_join_handler(event: GroupTypes.GroupJoin):
    await bot.api.messages.send(peer_id=event.object.user_id, message="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!", random_id=0,
                                keyboard=START_KEYBOARD)


bot.labeler.message_view.register_middleware(NoBotMiddleware())
bot.labeler.message_view.register_middleware(RegistrationMiddleware())
bot.labeler.message_view.register_middleware(InfoMiddleware())
bot.run_forever()
