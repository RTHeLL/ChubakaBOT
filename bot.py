import configparser
import logging
import random
from typing import Optional, Any, List

from vkbottle import GroupEventType, GroupTypes, Keyboard, VKAPIError, ABCHandler, ABCView, \
    BaseMiddleware, Callback, \
    CtxStorage
from vkbottle.bot import Bot, Message
from vkbottle_types.objects import UsersUserXtrCounters

import classes.mysql

UserAction = classes.mysql.UserAction()
MainData = classes.mysql.MainData()
dummy_db = CtxStorage()
config = configparser.ConfigParser()
config.read("data/vk_config.ini")

# Logs
logging.basicConfig(filename="logs/logs.log")

# VK Connection
bot = Bot(config["VK_DATA"]["GROUP_TOKEN"])

logging.basicConfig(level=logging.INFO)

START_KEYBOARD = (
    Keyboard(one_time=False).add(Callback("‚ùì –ü–æ–º–æ—â—å", payload={"cmd": "cmd_help"})).get_json()
)
MAIN_KEYBOARD = Keyboard(one_time=False).schema(
    [
        [{"label": "–ü—Ä–æ—Ñ–∏–ª—å", "type": "text", "color": "positive"}],
        [
            {"label": "–ü–æ–º–æ—â—å", "type": "text", "color": "primary"},
            {"label": "–¢–µ—Å—Ç 1", "type": "text", "color": "primary"},
            {"label": "–¢–µ—Å—Ç 2", "type": "text", "color": "primary"},
            {"label": "–¢–µ—Å—Ç 3", "type": "text", "color": "primary"},
        ],
    ]
).get_json()


# Subs classes
class NoBotMiddleware(BaseMiddleware):
    async def pre(self, message: Message):
        return message.from_id > 0  # True / False


class RegistrationMiddleware(BaseMiddleware):
    async def pre(self, message: Message):
        user = dummy_db.get(message.from_id)
        if user is None:
            user = (await bot.api.users.get(message.from_id))[0]
            dummy_db.set(message.from_id, user)
        return {"info": user}


class InfoMiddleware(BaseMiddleware):
    async def post(
            self,
            message: Message,
            view: "ABCView",
            handle_responses: List[Any],
            handlers: List["ABCHandler"],
    ):
        if not handlers:
            return


# Check for number function
def isint(text):
    try:
        int(text)
        return True
    except ValueError:
        return False


# Bot commands
@bot.on.message(text=["–ù–∞—á–∞—Ç—å", "–°—Ç–∞—Ä—Ç", "–Ω–∞—á–∞—Ç—å", "—Å—Ç–∞—Ä—Ç"])
@bot.on.message(payload={"cmd": "cmd_start"})
async def start_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: \
{UserAction.get_user(message.from_id)[0]}")
    else:
        await message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \"–ü–æ–º–æ—â—å\", –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ "
                             f"–∫–æ–º–∞–Ω–¥")


@bot.on.message(text=["–ü–æ–º–æ—â—å", "–ø–æ–º–æ—â—å"])
@bot.on.message(payload={"cmd": "cmd_help"})
async def help_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: \
{UserAction.get_user(message.from_id)[0]}")
    else:
        await message.answer(f"@id{message.from_id} ({info.first_name}), –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\nüéâ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ:\n‚†Ä‚†Äüòê "
                             f"–ê–Ω–µ–∫–¥–æ—Ç\n‚†Ä‚†Ä‚Ü™ –ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ [—Ñ—Ä–∞–∑–∞]\n‚†Ä‚†ÄüîÆ –®–∞—Ä [—Ñ—Ä–∞–∑–∞]\n‚†Ä‚†Äüìä –ò–Ω—Ñ–∞ [—Ñ—Ä–∞–∑–∞]\n‚†Ä‚†Ä‚öñ –í—ã–±–µ—Ä–∏ [—Ñ—Ä–∞–∑–∞] "
                             f"–∏–ª–∏ [—Ñ—Ä–∞–∑–∞2]\n\nüöÄ –ò–≥—Ä—ã:\n‚†Ä‚†Äüé≤ –ö—É–±–∏–∫ [1-6]\n‚†Ä‚†Äüé∞ –ö–∞–∑–∏–Ω–æ [—Å—É–º–º–∞]\n‚†Ä‚†Äüìà –¢—Ä–µ–π–¥ ["
                             f"–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑] [—Å—É–º–º–∞]\n‚†Ä‚†Äü•õ –°—Ç–∞–∫–∞–Ω—á–∏–∫ [1-3] [—Å—É–º–º–∞]\n‚†Ä‚†Äü¶Ö –ú–æ–Ω–µ—Ç–∫–∞ [–æ—Ä—ë–ª/—Ä–µ—à–∫–∞] ["
                             f"—Å—É–º–º–∞]\n‚†Ä‚†Äüì¶ –ö–µ–π—Å—ã\n\nüíº –ë–∏–∑–Ω–µ—Å:\n‚†Ä‚†ÄüìÉ –ë–∏–∑–Ω–µ—Å—ã [1/2] - —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤\n‚†Ä‚†Äüìà –ë–∏–∑–Ω–µ—Å - "
                             f"—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚†Ä‚†Äüíµ –ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å [–∫–æ–ª-–≤–æ] - —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å–æ —Å—á—ë—Ç–∞\n‚†Ä‚†Äüë∑ –ë–∏–∑–Ω–µ—Å –Ω–∞–Ω—è—Ç—å - "
                             f"–Ω–∞–Ω—è—Ç—å —Ä–∞–±–æ—á–∏—Ö\n\nüåΩ –ü–∏—Ç–æ–º—Ü—ã:\n‚†Ä‚†Äüêí –ü–∏—Ç–æ–º–µ—Ü - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n‚†Ä‚†Äüê™ –ü–∏—Ç–æ–º–µ—Ü –ø–æ—Ö–æ–¥\n‚†Ä‚†Äüåü "
                             f"–ü–∏—Ç–æ–º–µ—Ü —É–ª—É—á—à–∏—Ç—å\n\nüî• –ü–æ–ª–µ–∑–Ω–æ–µ:\n‚†Ä‚†Äüì† –†–µ—à–∏ [–ø—Ä–∏–º–µ—Ä]\n‚†Ä‚†Äüìä –ö—É—Ä—Å\n‚†Ä‚†ÄüÜï /–∫–Ω–æ–ø–∫–∏\n\nüí° "
                             f"–†–∞–∑–Ω–æ–µ:\n‚†Ä‚†Äüìí –ü—Ä–æ—Ñ–∏–ª—å\n‚†Ä‚†Ä‚öî –ö–ª–∞–Ω\n‚†Ä‚†Äüçπ –ó–µ–ª—å—è\n‚†Ä‚†Äüí≤ –ë–∞–ª–∞–Ω—Å\n‚†Ä‚†Äüí∞ –ë–∞–Ω–∫\n‚†Ä‚†Äüí≥ –ë–∞–Ω–∫ –ø–æ–º–æ—â—å - –≤—Å–µ "
                             f"–∫–æ–º–∞–Ω–¥—ã –±–∞–Ω–∫–∞\n‚†Ä‚†Äüëë –†–µ–π—Ç–∏–Ω–≥ - –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥\n‚†Ä‚†ÄüèÜ –¢–æ–ø\n‚†Ä‚†Ä‚úí –ù–∏–∫ [–Ω–∏–∫/–≤–∫–ª/–≤—ã–∫–ª]\n‚†Ä‚†Äüõç "
                             f"–ú–∞–≥–∞–∑–∏–Ω\n‚†Ä‚†Äüí∏ –ü—Ä–æ–¥–∞—Ç—å [–ø—Ä–µ–¥–º–µ—Ç]\n‚†Ä‚†Äüîã –§–µ—Ä–º–∞ - –±–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º–∞\n‚†Ä‚†Äü§ù –ü–µ—Ä–µ–¥–∞—Ç—å [ID] ["
                             f"—Å—É–º–º–∞]\n‚†Ä‚†Äüíé –ë–æ–Ω—É—Å - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n‚†Ä‚†Äüë• –†–µn\n‚†Ä‚†ÄüèÜ –†–µ—Ñ —Ç–æ–ø\n‚†Ä‚†ÄüéÅ –î–æ–Ω–∞—Ç\n\nüÜò –†–µ–ø–æ—Ä—Ç ["
                             f"—Ñ—Ä–∞–∑–∞] - –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è", keyboard=MAIN_KEYBOARD)


@bot.on.message(text=["–ü—Ä–æ—Ñ–∏–ª—å", "–ø—Ä–æ—Ñ–∏–ª—å"])
@bot.on.message(payload={"cmd": "cmd_profile"})
async def profile_handler(message: Message, info: UsersUserXtrCounters):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: \
{UserAction.get_user(message.from_id)[0]}")
    else:
        user = UserAction.get_user(message.from_id), UserAction.get_user_property(message.from_id)

        temp_message = f'@id{message.from_id} ({info.first_name}), –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n'
        temp_message += f'üîé ID: {user[0][0]["ID"]}\n'
        # Check RankLevel
        if user[0][0]["RankLevel"] == 2:
            temp_message += f'üî• VIP –∏–≥—Ä–æ–∫\n'
        elif user[0][0]["RankLevel"] == 3:
            temp_message += f'üîÆ Premium –∏–≥—Ä–æ–∫\n'
        elif user[0][0]["RankLevel"] == 4:
            temp_message += f'üåÄ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä\n'
        elif user[0][0]["RankLevel"] >= 5:
            temp_message += f'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n'
        # Basic check
        if user[0][0]["EXP"] > 0:
            temp_message += f'‚≠ê –û–ø—ã—Ç–∞: {user[0][0]["EXP"]}\n'
        if user[0][0]["Money"] > 0:
            temp_message += f'üí∞ –î–µ–Ω–µ–≥: {user[0][0]["Money"]}\n'
        if user[0][0]["BTC"] > 0:
            temp_message += f'üåê –ë–∏—Ç–∫–æ–∏–Ω–æ–≤: {user[0][0]["BTC"]}\n'
        if user[0][0]["Rating"] > 0:
            temp_message += f'üëë –†–µ–π—Ç–∏–Ω–≥: {user[0][0]["Rating"]}\n'
        # Property
        temp_message += f'\nüîë –ò–º—É—â–µ—Å—Ç–≤–æ:\n'
        if user[1][0]["Car"] > 0:
            temp_message += f'‚†Äüöó –ú–∞—à–∏–Ω–∞: {MainData.get_data("cars")[user[1][0]["Car"] - 1]["CarName"]}\n'
        if user[1][0]["Yacht"] > 0:
            temp_message += f'‚†Äüõ• –Ø—Ö—Ç–∞: {MainData.get_data("yachts")[user[1][0]["Yacht"] - 1]["YachtName"]}\n'
        if user[1][0]["Airplane"] > 0:
            temp_message += f'‚†Ä‚úà –°–∞–º–æ–ª–µ—Ç: {MainData.get_data("airplanes")[user[1][0]["Airplane"] - 1]["AirplaneName"]}\n'
        if user[1][0]["Helicopter"] > 0:
            temp_message += f'‚†ÄüöÅ –í–µ—Ä—Ç–æ–ª–µ—Ç: {MainData.get_data("helicopters")[user[1][0]["Helicopter"] - 1]["HelicopterName"]}\n'
        if user[1][0]["House"] > 0:
            temp_message += f'‚†Äüè† –î–æ–º: {MainData.get_data("houses")[user[1][0]["House"] - 1]["HouseName"]}\n'
        if user[1][0]["Apartment"] > 0:
            temp_message += f'‚†Äüåá –ö–≤–∞—Ä—Ç–∏—Ä–∞: {MainData.get_data("apartments")[user[1][0]["Apartment"] - 1]["ApartmentName"]}\n'
        if user[1][0]["Business"] > 0:
            temp_message += f'‚†Äüíº –ë–∏–∑–Ω–µ—Å: {MainData.get_data("businesses")[user[1][0]["Business"] - 1]["BusinessName"]}\n'
        if user[1][0]["Pet"] > 0:
            temp_message += f'‚†Äü¶† –ü–∏—Ç–æ–º–µ—Ü: {MainData.get_data("pets")[user[1][0]["Pet"] - 1]["PetName"]}\n'
        if user[1][0]["Farms"] > 0:
            temp_message += f'‚†Äüîã –§–µ—Ä–º—ã: {MainData.get_data("farms")[user[1][0]["FarmsType"] - 1]["FarmName"]} ({user[1][0]["Farms"]} —à—Ç.)\n'
        if user[1][0]["Phone"] > 0:
            temp_message += f'‚†Äüì± –¢–µ–ª–µ—Ñ–æ–Ω: {MainData.get_data("phones")[user[1][0]["Phone"] - 1]["PhoneName"]}\n'

        temp_message += f'\nüìó –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[0][0]["Register_Data"].strftime("%d.%m.%Y, %H:%M:%S")}\n'
        await message.answer(temp_message)


@bot.on.message(text=["–ë–∞–Ω–∫", "–±–∞–Ω–∫"])
@bot.on.message(text=["–ë–∞–Ω–∫ <item1>", "–±–∞–Ω–∫ <item1>"])
@bot.on.message(text=["–ë–∞–Ω–∫ <item1> <item2:int>", "–±–∞–Ω–∫ <item1> <item2:int>"])
@bot.on.message(payload={"cmd": "cmd_bank"})
async def bank_handler(message: Message, info: UsersUserXtrCounters, item1: Optional[str] = None,
                       item2: Optional[int] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: \
{UserAction.get_user(message.from_id)[0]}")
    else:
        user = UserAction.get_user(message.from_id)
        if item1 is None and item2 is None:
            await message.answer(
                f'@id{message.from_id} ({info.first_name}), –Ω–∞ –í–∞—à–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ: {user[0]["Bank_Money"]}$')
        elif item1 == "–ø–æ–ª–æ–∂–∏—Ç—å":
            if item2 is None or not isint(item2):
                await message.answer(f'@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–±–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å [—Å—É–º–º–∞], '
                                     f'—á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á–µ—Ç')
            else:
                if user[0]["Money"] < item2:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), —É –í–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                else:
                    user[0]["Bank_Money"] += item2
                    user[0]["Money"] -= item2
                    UserAction.update_user(message.from_id, user)
                    await message.answer(
                        f'@id{message.from_id} ({info.first_name}), –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –Ω–∞ {item2}$')
        elif item1 == "—Å–Ω—è—Ç—å":
            if item2 is None or not isint(item2):
                await message.answer(f'@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–±–∞–Ω–∫ —Å–Ω—è—Ç—å [—Å—É–º–º–∞], '
                                     f'—á—Ç–æ–±—ã —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å–æ —Å—á–µ—Ç–∞')
            else:
                if user[0]["Bank_Money"] < item2:
                    await message.answer(f'@id{message.from_id} ({info.first_name}), –Ω–∞ –í–∞—à–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ –Ω–µ—Ç '
                                         f'—Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!')
                else:
                    user[0]["Bank_Money"] -= item2
                    user[0]["Money"] += item2
                    UserAction.update_user(message.from_id, user)
                    await message.answer(
                        f'@id{message.from_id} ({info.first_name}), –í—ã —Å–Ω—è–ª–∏ —Å–æ —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ {item2}$')
        else:
            await message.answer(f'@id{message.from_id} ({info.first_name}), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–±–∞–Ω–∫ [–ø–æ–ª–æ–∂–∏—Ç—å/—Å–Ω—è—Ç—å] [—Å—É–º–º–∞]'
                                 f'"')


@bot.on.message(text=["–í—ã–±–µ—Ä–∏ <item1> <item2>", "–≤—ã–±–µ—Ä–∏ <item1> <item2>"])
@bot.on.message(payload={"cmd": "cmd_selecttext"})
async def selecttext_handler(message: Message, info: UsersUserXtrCounters, item1: Optional[str] = None,
                             item2: Optional[str] = None):
    if not UserAction.get_user(message.from_id):
        await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!\n–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        UserAction.create_user(message.from_id)
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–µ –∏–º—è: {info.first_name}\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: \
{UserAction.get_user(message.from_id)[0]}")
    else:
        if item1 is None or item2 is None:
            await message.answer(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≤—ã–±–µ—Ä–∏ \"—Ñ—Ä–∞–∑–∞ 1\" \"—Ñ—Ä–∞–∑–∞ 2\"")
        else:
            temp_var = random.randint(0, 1)
            if temp_var == 0:
                await message.answer(
                    f"@id{message.from_id} ({info.first_name}), –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è –ª—É—á—à–µ \"{item1}\", —á–µ–º \"{item2}\"")
            elif temp_var == 1:
                await message.answer(
                    f"@id{message.from_id} ({info.first_name}), –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è –ª—É—á—à–µ \"{item2}\", —á–µ–º \"{item1}\"")


@bot.on.raw_event(GroupEventType.GROUP_JOIN, dataclass=GroupTypes.GroupJoin)
async def group_join_handler(event: GroupTypes.GroupJoin):
    try:
        await bot.api.messages.send(
            peer_id=event.object.user_id, message="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!", random_id=0, keyboard=MAIN_KEYBOARD
        )
    except VKAPIError(901):
        pass

bot.labeler.message_view.register_middleware(NoBotMiddleware())
bot.labeler.message_view.register_middleware(RegistrationMiddleware())
bot.labeler.message_view.register_middleware(InfoMiddleware())
bot.run_forever()
